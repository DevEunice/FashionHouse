{"ast":null,"code":"var _jsxFileName = \"/Users/decagon/Desktop/Ecommerce-Projects/FashionHub/src/components/Login.js\",\n  _s = $RefreshSig$();\nimport { Button, CircularProgress, Stack, TextField } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport axios from \"axios\";\nimport { useSnackbar } from \"notistack\";\nimport React, { useState } from \"react\";\nimport { useHistory, Link } from \"react-router-dom\";\nimport { config } from \"../App\";\nimport Footer from \"./Footer\";\nimport Header from \"./Header\";\nimport \"./Login.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Login = () => {\n  _s();\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const [username, updateUsername] = useState(\"\");\n  const [password, udpatePassword] = useState(\"\");\n  const history = useHistory();\n\n  // TODO: CRIO_TASK_MODULE_LOGIN - Fetch the API response\n  /**\n   * Perform the Login API call\n   * @param {{ username: string, password: string }} formData\n   *  Object with values of username, password and confirm password user entered to register\n   *\n   * API endpoint - \"POST /auth/login\"\n   *\n   * Example for successful response from backend:\n   * HTTP 201\n   * {\n   *      \"success\": true,\n   *      \"token\": \"testtoken\",\n   *      \"username\": \"criodo\",\n   *      \"balance\": 5000\n   * }\n   *\n   * Example for failed response from backend:\n   * HTTP 400\n   * {\n   *      \"success\": false,\n   *      \"message\": \"Password is incorrect\"\n   * }\n   *\n   */\n  const login = async formData => {\n    //  console.log(formData)\n    let url = config.endpoint;\n    try {\n      let res = await axios.post(`${url}/auth/login`, formData);\n      if (res.data.success) {\n        enqueueSnackbar(\"Logged in successfully\", {\n          variant: 'success'\n        });\n        let {\n          token,\n          username,\n          balance\n        } = res.data;\n        persistLogin(token, username, balance - 0);\n      }\n    } catch (e) {\n      axios.post(`${url}/auth/login`, formData).catch(e => {\n        if (e.response) {\n          console.log(e.response);\n          enqueueSnackbar(e.response.data.message, {\n            variant: 'error'\n          });\n        } else {\n          // Something happened in setting up the request that triggered an Error\n          enqueueSnackbar(\"Something went wrong. Check that the backend is running, reachable and returns valid JSON.\", {\n            variant: 'error'\n          });\n        }\n      });\n    }\n  };\n\n  // TODO: CRIO_TASK_MODULE_LOGIN - Validate the input\n  /**\n   * Validate the input values so that any bad or illegal values are not passed to the backend.\n   *\n   * @param {{ username: string, password: string }} data\n   *  Object with values of username, password and confirm password user entered to register\n   *\n   * @returns {boolean}\n   *    Whether validation has passed or not\n   *\n   * Return false and show warning message if any validation condition fails, otherwise return true.\n   * (NOTE: The error messages to be shown for each of these cases, are given with them)\n   * -    Check that username field is not an empty value - \"Username is a required field\"\n   * -    Check that password field is not an empty value - \"Password is a required field\"\n   */\n\n  let datas = {\n    \"username\": username,\n    \"password\": password\n  };\n  const evenHandler = () => {\n    {\n      validateInput(datas) && login(datas);\n    }\n  };\n  const validateInput = _ref => {\n    let {\n      username,\n      password\n    } = _ref;\n    if (username === \"\") {\n      enqueueSnackbar(\"Username is a required field\", {\n        variant: 'warning'\n      });\n      return false;\n    }\n    if (password === \"\" || password.length < 6) {\n      enqueueSnackbar(\"Password is a required field\", {\n        variant: 'warning'\n      });\n      return false;\n    }\n    return true;\n  };\n\n  // TODO: CRIO_TASK_MODULE_LOGIN - Persist user's login information\n  /**\n   * Store the login information so that it can be used to identify the user in subsequent API calls\n   *\n   * @param {string} token\n   *    API token used for authentication of requests after logging in\n   * @param {string} username\n   *    Username of the logged in user\n   * @param {string} balance\n   *    Wallet balance amount of the logged in user\n   *\n   * Make use of localStorage: https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage\n   * -    `token` field in localStorage can be used to store the Oauth token\n   * -    `username` field in localStorage can be used to store the username that the user is logged in as\n   * -    `balance` field in localStorage can be used to store the balance amount in the user's wallet\n   */\n\n  const persistLogin = (token, username, balance) => {\n    localStorage.setItem(\"token\", token);\n    localStorage.setItem('username', username);\n    localStorage.setItem('balance', balance);\n    history.push(\"/\");\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"space-between\",\n    minHeight: \"100vh\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      hasHiddenAuthButtons: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      className: \"content\",\n      children: /*#__PURE__*/_jsxDEV(Stack, {\n        spacing: 2,\n        className: \"form\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"title\",\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          id: \"username\",\n          label: \"username\",\n          name: \"username\",\n          value: username,\n          onChange: e => updateUsername(e.target.value),\n          type: \"text\",\n          variant: \"outlined\",\n          fullWidth: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          id: \"password\",\n          label: \"password\",\n          type: \"password\",\n          name: \"password\",\n          value: password,\n          onChange: e => udpatePassword(e.target.value),\n          variant: \"outlined\",\n          fullWidth: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: \"button\",\n          variant: \"contained\",\n          onClick: evenHandler,\n          children: \"LOGIN TO QKART\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"secondary-action\",\n          children: [\"Don\\u2019t have an account?\", \" \", /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/register\",\n            className: \"link\",\n            children: \"Register now\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 12\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this);\n};\n_s(Login, \"BSMise/BTQGlmqRuTqRzbkuW628=\", false, function () {\n  return [useSnackbar, useHistory];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["Button","CircularProgress","Stack","TextField","Box","axios","useSnackbar","React","useState","useHistory","Link","config","Footer","Header","jsxDEV","_jsxDEV","Login","_s","enqueueSnackbar","username","updateUsername","password","udpatePassword","history","login","formData","url","endpoint","res","post","data","success","variant","token","balance","persistLogin","e","catch","response","console","log","message","datas","evenHandler","validateInput","_ref","length","localStorage","setItem","push","display","flexDirection","justifyContent","minHeight","children","hasHiddenAuthButtons","fileName","_jsxFileName","lineNumber","columnNumber","className","spacing","id","label","name","value","onChange","target","type","fullWidth","onClick","to","_c","$RefreshReg$"],"sources":["/Users/decagon/Desktop/Ecommerce-Projects/FashionHub/src/components/Login.js"],"sourcesContent":["import { Button, CircularProgress, Stack, TextField } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport axios from \"axios\";\nimport { useSnackbar } from \"notistack\";\nimport React, { useState } from \"react\";\nimport { useHistory, Link } from \"react-router-dom\";\nimport { config } from \"../App\";\nimport Footer from \"./Footer\";\nimport Header from \"./Header\";\nimport \"./Login.css\";\n\n\n\nconst Login = () => {\n  const { enqueueSnackbar } = useSnackbar();\n  const [username,updateUsername]=useState(\"\");\n  const [password,udpatePassword]=useState(\"\");\n  const history=useHistory();\n\n  // TODO: CRIO_TASK_MODULE_LOGIN - Fetch the API response\n  /**\n   * Perform the Login API call\n   * @param {{ username: string, password: string }} formData\n   *  Object with values of username, password and confirm password user entered to register\n   *\n   * API endpoint - \"POST /auth/login\"\n   *\n   * Example for successful response from backend:\n   * HTTP 201\n   * {\n   *      \"success\": true,\n   *      \"token\": \"testtoken\",\n   *      \"username\": \"criodo\",\n   *      \"balance\": 5000\n   * }\n   *\n   * Example for failed response from backend:\n   * HTTP 400\n   * {\n   *      \"success\": false,\n   *      \"message\": \"Password is incorrect\"\n   * }\n   *\n   */\n  const login = async (formData) => {\n\n  //  console.log(formData)\n    let url=config.endpoint;\n    try{\n\n      let res= await axios.post(`${url}/auth/login`,formData);\n      if(res.data.success){\n        enqueueSnackbar(\"Logged in successfully\",{ variant: 'success' });\n        let {token,username,balance}=res.data;\n        persistLogin(token,username,balance-0)\n      \n      }\n    }catch(e){\n      axios.post(`${url}/auth/login`,formData).catch((e)=>{\n        if(e.response){\n          console.log(e.response)\n          enqueueSnackbar(e.response.data.message,{ variant: 'error' })\n        }\n        else {\n          // Something happened in setting up the request that triggered an Error\n          enqueueSnackbar(\"Something went wrong. Check that the backend is running, reachable and returns valid JSON.\",{ variant: 'error' })\n        }\n      })\n    }\n\n\n  };\n\n  // TODO: CRIO_TASK_MODULE_LOGIN - Validate the input\n  /**\n   * Validate the input values so that any bad or illegal values are not passed to the backend.\n   *\n   * @param {{ username: string, password: string }} data\n   *  Object with values of username, password and confirm password user entered to register\n   *\n   * @returns {boolean}\n   *    Whether validation has passed or not\n   *\n   * Return false and show warning message if any validation condition fails, otherwise return true.\n   * (NOTE: The error messages to be shown for each of these cases, are given with them)\n   * -    Check that username field is not an empty value - \"Username is a required field\"\n   * -    Check that password field is not an empty value - \"Password is a required field\"\n   */\n\n  let datas={\n    \"username\":username,\"password\":password\n  }\n   const  evenHandler=()=>{\n    {validateInput(datas) && login(datas)}\n  }\n\n  const validateInput = ({username,password}) => {\n        if(username===\"\"){\n          enqueueSnackbar(\"Username is a required field\",{ variant: 'warning' });\n          return false;\n        }\n        if(password===\"\" || password.length<6){\n          enqueueSnackbar(\"Password is a required field\",{ variant: 'warning' });\n          return false;\n        }\n        return true;\n  };\n\n  // TODO: CRIO_TASK_MODULE_LOGIN - Persist user's login information\n  /**\n   * Store the login information so that it can be used to identify the user in subsequent API calls\n   *\n   * @param {string} token\n   *    API token used for authentication of requests after logging in\n   * @param {string} username\n   *    Username of the logged in user\n   * @param {string} balance\n   *    Wallet balance amount of the logged in user\n   *\n   * Make use of localStorage: https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage\n   * -    `token` field in localStorage can be used to store the Oauth token\n   * -    `username` field in localStorage can be used to store the username that the user is logged in as\n   * -    `balance` field in localStorage can be used to store the balance amount in the user's wallet\n   */\n\n\n  \n\n\n  const persistLogin = (token, username, balance) => {\n\n    localStorage.setItem(\"token\",token);\n    localStorage.setItem('username',username);\n    localStorage.setItem('balance',balance);\n    history.push(\"/\")\n\n  };\n\n  return (\n    <Box\n      display=\"flex\"\n      flexDirection=\"column\"\n      justifyContent=\"space-between\"\n      minHeight=\"100vh\"\n    >\n      <Header hasHiddenAuthButtons={true} />\n      <Box className=\"content\">\n        <Stack spacing={2} className=\"form\">\n          <h2 className={\"title\"}>Login</h2>\n          <TextField \n          id=\"username\"\n           label=\"username\" \n           name=\"username\"\n           value={username}\n           onChange={(e)=>updateUsername(e.target.value)}\n           type=\"text\"\n           variant=\"outlined\" \n           fullWidth\n           />\n           <TextField \n          id=\"password\"\n           label=\"password\" \n           type=\"password\"\n           name=\"password\"\n           value={password}\n           onChange={(e)=>udpatePassword(e.target.value)}\n           variant=\"outlined\"\n           fullWidth\n           />\n           <Button  \n           className=\"button\" \n           variant=\"contained\"\n           onClick={evenHandler}\n           >LOGIN TO QKART</Button>\n           <p className=\"secondary-action\">\n           Don’t have an account?{\" \"}\n            <Link to=\"/register\" className={\"link\"}>Register now</Link>\n          </p>\n           \n        </Stack>\n      </Box>\n      <Footer />\n    </Box>\n  );\n};\n\nexport default Login;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}