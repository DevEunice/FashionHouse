[{"/Users/decagon/Desktop/Ecommerce-Projects/FashionHub/src/index.js":"1","/Users/decagon/Desktop/Ecommerce-Projects/FashionHub/src/theme.js":"2","/Users/decagon/Desktop/Ecommerce-Projects/FashionHub/src/App.js":"3","/Users/decagon/Desktop/Ecommerce-Projects/FashionHub/src/components/Checkout.js":"4","/Users/decagon/Desktop/Ecommerce-Projects/FashionHub/src/components/Thanks.js":"5","/Users/decagon/Desktop/Ecommerce-Projects/FashionHub/src/components/Login.js":"6","/Users/decagon/Desktop/Ecommerce-Projects/FashionHub/src/components/Register.js":"7","/Users/decagon/Desktop/Ecommerce-Projects/FashionHub/src/components/Products.js":"8","/Users/decagon/Desktop/Ecommerce-Projects/FashionHub/src/components/Footer.js":"9","/Users/decagon/Desktop/Ecommerce-Projects/FashionHub/src/components/Header.js":"10","/Users/decagon/Desktop/Ecommerce-Projects/FashionHub/src/components/Cart.js":"11","/Users/decagon/Desktop/Ecommerce-Projects/FashionHub/src/components/ProductCard.js":"12"},{"size":715,"mtime":1676621781000,"results":"13","hashOfConfig":"14"},{"size":290,"mtime":1676621781000,"results":"15","hashOfConfig":"14"},{"size":947,"mtime":1676621781000,"results":"16","hashOfConfig":"14"},{"size":18694,"mtime":1676621781000,"results":"17","hashOfConfig":"14"},{"size":1133,"mtime":1676621781000,"results":"18","hashOfConfig":"14"},{"size":5747,"mtime":1676621781000,"results":"19","hashOfConfig":"14"},{"size":6814,"mtime":1676621781000,"results":"20","hashOfConfig":"14"},{"size":13947,"mtime":1676621781000,"results":"21","hashOfConfig":"14"},{"size":451,"mtime":1676621781000,"results":"22","hashOfConfig":"14"},{"size":1530,"mtime":1676621781000,"results":"23","hashOfConfig":"14"},{"size":7830,"mtime":1676621781000,"results":"24","hashOfConfig":"14"},{"size":1341,"mtime":1676621781000,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"192mi4g",{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/decagon/Desktop/Ecommerce-Projects/FashionHub/src/index.js",[],"/Users/decagon/Desktop/Ecommerce-Projects/FashionHub/src/theme.js",[],"/Users/decagon/Desktop/Ecommerce-Projects/FashionHub/src/App.js",["56","57"],"import Register from \"./components/Register\";\nimport Product from \"./components/Products\";\nimport Login from \"./components/Login\";\nimport Checkout from \"./components/Checkout\";\nimport Thanks from './components/Thanks'\nimport ipConfig from \"./ipConfig.json\";\nimport {Switch,Route,Link} from \"react-router-dom\";\n\nexport const config = {\n  endpoint: `https://qkartbackend-lojd.onrender.com/api/v1`,\n};\n\nfunction App() {\n  return (\n    <div className=\"App\">\n  \n        <Switch>\n            <Route  path=\"/register\">\n             <Register />\n            </Route>\n            <Route  path=\"/login\">\n              <Login />\n            </Route>   \n            <Route  path=\"/checkout\">\n             <Checkout /> \n            </Route>\n            <Route  path=\"/Thanks\">\n             <Thanks /> \n            </Route>\n            <Route  path=\"/\">\n             <Product /> \n            </Route>\n        </Switch>\n  \n    </div>\n  );\n}\n\nexport default App;\n","/Users/decagon/Desktop/Ecommerce-Projects/FashionHub/src/components/Checkout.js",[],"/Users/decagon/Desktop/Ecommerce-Projects/FashionHub/src/components/Thanks.js",[],"/Users/decagon/Desktop/Ecommerce-Projects/FashionHub/src/components/Login.js",["58","59"],"import { Button, CircularProgress, Stack, TextField } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport axios from \"axios\";\nimport { useSnackbar } from \"notistack\";\nimport React, { useState } from \"react\";\nimport { useHistory, Link } from \"react-router-dom\";\nimport { config } from \"../App\";\nimport Footer from \"./Footer\";\nimport Header from \"./Header\";\nimport \"./Login.css\";\n\n\n\nconst Login = () => {\n  const { enqueueSnackbar } = useSnackbar();\n  const [username,updateUsername]=useState(\"\");\n  const [password,udpatePassword]=useState(\"\");\n  const history=useHistory();\n\n  // TODO: CRIO_TASK_MODULE_LOGIN - Fetch the API response\n  /**\n   * Perform the Login API call\n   * @param {{ username: string, password: string }} formData\n   *  Object with values of username, password and confirm password user entered to register\n   *\n   * API endpoint - \"POST /auth/login\"\n   *\n   * Example for successful response from backend:\n   * HTTP 201\n   * {\n   *      \"success\": true,\n   *      \"token\": \"testtoken\",\n   *      \"username\": \"criodo\",\n   *      \"balance\": 5000\n   * }\n   *\n   * Example for failed response from backend:\n   * HTTP 400\n   * {\n   *      \"success\": false,\n   *      \"message\": \"Password is incorrect\"\n   * }\n   *\n   */\n  const login = async (formData) => {\n\n  //  console.log(formData)\n    let url=config.endpoint;\n    try{\n\n      let res= await axios.post(`${url}/auth/login`,formData);\n      if(res.data.success){\n        enqueueSnackbar(\"Logged in successfully\",{ variant: 'success' });\n        let {token,username,balance}=res.data;\n        persistLogin(token,username,balance-0)\n      \n      }\n    }catch(e){\n      axios.post(`${url}/auth/login`,formData).catch((e)=>{\n        if(e.response){\n          console.log(e.response)\n          enqueueSnackbar(e.response.data.message,{ variant: 'error' })\n        }\n        else {\n          // Something happened in setting up the request that triggered an Error\n          enqueueSnackbar(\"Something went wrong. Check that the backend is running, reachable and returns valid JSON.\",{ variant: 'error' })\n        }\n      })\n    }\n\n\n  };\n\n  // TODO: CRIO_TASK_MODULE_LOGIN - Validate the input\n  /**\n   * Validate the input values so that any bad or illegal values are not passed to the backend.\n   *\n   * @param {{ username: string, password: string }} data\n   *  Object with values of username, password and confirm password user entered to register\n   *\n   * @returns {boolean}\n   *    Whether validation has passed or not\n   *\n   * Return false and show warning message if any validation condition fails, otherwise return true.\n   * (NOTE: The error messages to be shown for each of these cases, are given with them)\n   * -    Check that username field is not an empty value - \"Username is a required field\"\n   * -    Check that password field is not an empty value - \"Password is a required field\"\n   */\n\n  let datas={\n    \"username\":username,\"password\":password\n  }\n   const  evenHandler=()=>{\n    {validateInput(datas) && login(datas)}\n  }\n\n  const validateInput = ({username,password}) => {\n        if(username===\"\"){\n          enqueueSnackbar(\"Username is a required field\",{ variant: 'warning' });\n          return false;\n        }\n        if(password===\"\" || password.length<6){\n          enqueueSnackbar(\"Password is a required field\",{ variant: 'warning' });\n          return false;\n        }\n        return true;\n  };\n\n  // TODO: CRIO_TASK_MODULE_LOGIN - Persist user's login information\n  /**\n   * Store the login information so that it can be used to identify the user in subsequent API calls\n   *\n   * @param {string} token\n   *    API token used for authentication of requests after logging in\n   * @param {string} username\n   *    Username of the logged in user\n   * @param {string} balance\n   *    Wallet balance amount of the logged in user\n   *\n   * Make use of localStorage: https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage\n   * -    `token` field in localStorage can be used to store the Oauth token\n   * -    `username` field in localStorage can be used to store the username that the user is logged in as\n   * -    `balance` field in localStorage can be used to store the balance amount in the user's wallet\n   */\n\n\n  \n\n\n  const persistLogin = (token, username, balance) => {\n\n    localStorage.setItem(\"token\",token);\n    localStorage.setItem('username',username);\n    localStorage.setItem('balance',balance);\n    history.push(\"/\")\n\n  };\n\n  return (\n    <Box\n      display=\"flex\"\n      flexDirection=\"column\"\n      justifyContent=\"space-between\"\n      minHeight=\"100vh\"\n    >\n      <Header hasHiddenAuthButtons={true} />\n      <Box className=\"content\">\n        <Stack spacing={2} className=\"form\">\n          <h2 className={\"title\"}>Login</h2>\n          <TextField \n          id=\"username\"\n           label=\"username\" \n           name=\"username\"\n           value={username}\n           onChange={(e)=>updateUsername(e.target.value)}\n           type=\"text\"\n           variant=\"outlined\" \n           fullWidth\n           />\n           <TextField \n          id=\"password\"\n           label=\"password\" \n           type=\"password\"\n           name=\"password\"\n           value={password}\n           onChange={(e)=>udpatePassword(e.target.value)}\n           variant=\"outlined\"\n           fullWidth\n           />\n           <Button  \n           className=\"button\" \n           variant=\"contained\"\n           onClick={evenHandler}\n           >LOGIN TO QKART</Button>\n           <p className=\"secondary-action\">\n           Don’t have an account?{\" \"}\n            <Link to=\"/register\" className={\"link\"}>Register now</Link>\n          </p>\n           \n        </Stack>\n      </Box>\n      <Footer />\n    </Box>\n  );\n};\n\nexport default Login;\n","/Users/decagon/Desktop/Ecommerce-Projects/FashionHub/src/components/Register.js",["60"],"import { Button, CircularProgress, Stack, TextField } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport axios from \"axios\";\nimport { useSnackbar } from \"notistack\";\nimport React, { useState } from \"react\";\nimport { config } from \"../App\";\nimport Footer from \"./Footer\";\nimport Header from \"./Header\";\nimport \"./Register.css\";\nimport { useHistory } from \"react-router-dom\";\nimport {Link} from \"react-router-dom\";\n\nconst Register = () => {\n  const { enqueueSnackbar } = useSnackbar();\n  const [username,updateUserName]=useState(\"\");\n  const [password,updatePassword]=useState(\"\");\n  const [confirmPassword,updateConfirmPasswrod]=useState(\"\");\n  const [loader,updateLoader]=useState(false);\n  const history=useHistory();\n\n  // TODO: CRIO_TASK_MODULE_REGISTER - Implement the register function\n  /**\n   * Definition for register handler\n   * - Function to be called when the user clicks on the register button or submits the register form\n   *\n   * @param {{ username: string, password: string, confirmPassword: string }} formData\n   *  Object with values of username, password and confirm password user entered to register\n   *\n   * API endpoint - \"POST /auth/register\"\n   *\n   * Example for successful response from backend for the API call:\n   * HTTP 201\n   * {\n   *      \"success\": true,\n   * }\n   *\n   * Example for failed response from backend for the API call:\n   * HTTP 400\n   * {\n   *      \"success\": false,\n   *      \"message\": \"Username is already taken\"\n   * }\n   */\n  const register = async (formData) => {\n    updateLoader(true)\n\n    let url=config.endpoint;\n    console.log(url)\n     try{\n      let request = await axios.post(`${url}/auth/register`,{\n        \"username\": formData.username,\n        \"password\": formData.password\n        })\n        // console.log(request.data.data)\n        console.log(request.data)\n        updateLoader(false)\n      enqueueSnackbar(\"Registered successfully\",{ variant: 'success' })\n      \n      history.push(\"/login\")\n      \n    }\n    catch(e){\n\n          axios.post(`${url}/auth/register`,{\n            \"username\":formData.username,\n            \"password\": formData.password\n              }).catch((e)=>{\n                if(e.response){\n                  enqueueSnackbar(e.response.data.message,{ variant: 'error' })\n                }\n                else {\n                  // Something happened in setting up the request that triggered an Error\n                  enqueueSnackbar(\"Something went wrong. Check that the backend is running, reachable and returns valid JSON.\",{ variant: 'error' })\n                }\n              })\n              updateLoader(false)\n       \n      }//catch function close\n      \n    } //main funciton resigter closed\n\n  \n\n  // TODO: CRIO_TASK_MODULE_REGISTER - Implement user input validation logic\n  /**\n   * Validate the input values so that any bad or illegal values are not passed to the backend.\n   *\n   * @param {{ username: string, password: string, confirmPassword: string }} data\n   *  Object with values of username, password and confirm password user entered to register\n   *\n   * @returns {boolean}\n   *    Whether validation has passed or not\n   *\n   * Return false if any validation condition fails, otherwise return true.\n   * (NOTE: The error messages to be shown for each of these cases, are given with them)\n   * -    Check that username field is not an empty value - \"Username is a required field\"\n   * -    Check that username field is not less than 6 characters in length - \"Username must be at least 6 characters\"\n   * -    Check that password field is not an empty value - \"Password is a required field\"\n   * -    Check that password field is not less than 6 characters in length - \"Password must be at least 6 characters\"\n   * -    Check that confirmPassword field has the same value as password field - Passwords do not match\n   */\n\n    let data={\n      \"username\":username,\n      \"password\":password,\n      \"confirmPassword\":confirmPassword\n    }\n\n    const eventHandler=()=>{\n        {validateInput(data) && register(data) }\n    }\n\n\n  const validateInput = (data) => {\n      const {username,password,confirmPassword}=data;\n      let lenUsername=username.length;\n      let lenpass=password.length;\n      if(lenUsername<1){\n        enqueueSnackbar(\"Username is a required field\",{ variant: 'warning' });\n        return false;\n      }else if(lenUsername<6){\n        enqueueSnackbar(\"Username must be at least 6 characters\",{ variant: 'warning' });\n        return false;\n      }else if(lenpass<1){\n        enqueueSnackbar(\"Password is a required field\",{ variant: 'warning' });\n        return false;\n      }else if(lenpass<6){\n        enqueueSnackbar(\"Password must be at least 6 characters\",{ variant: 'warning' });\n        return false;\n      }else if(password!==confirmPassword){\n        enqueueSnackbar(\"Passwords do not match\",{ variant: 'warning' });\n        return false;\n      }else{\n        return true;\n      }\n\n   \n  };\n\n  return (\n    <Box\n      display=\"flex\"\n      flexDirection=\"column\"\n      justifyContent=\"space-between\"\n      minHeight=\"100vh\"\n     \n    >\n      <Header hasHiddenAuthButtons={true} />\n      <Box className=\"content\">\n        <Stack spacing={2} className=\"form\">\n          <h2 className=\"title\">Register</h2>\n          <TextField\n            id=\"username\"\n            label=\"Username\"\n            variant=\"outlined\"\n            title=\"Username\"\n            name=\"username\"\n            placeholder=\"Enter Username\"\n            onChange={(e)=>updateUserName(e.target.value)}\n            fullWidth\n\n          />\n          <TextField\n            id=\"password\"\n            variant=\"outlined\"\n            label=\"Password\"\n            name=\"password\"\n            type=\"password\"\n            helperText=\"Password must be atleast 6 characters length\"\n            fullWidth\n            placeholder=\"Enter a password with minimum 6 characters\"\n            onChange={(e)=>updatePassword(e.target.value)}\n          />\n          <TextField\n            id=\"confirmPassword\"\n            variant=\"outlined\"\n            label=\"Confirm Password\"\n            name=\"confirmPassword\"\n            onChange={(e)=>updateConfirmPasswrod(e.target.value)}\n            type=\"password\"\n            fullWidth\n          />\n          {loader ?<Box sx={{ display: 'flex',justifyContent:\"center\" }}>\n                    <CircularProgress />\n                   </Box>\n                  :<Button onClick={eventHandler}  className=\"button\" variant=\"contained\">\n            Register Now\n           </Button>\n           }\n           \n          <p className=\"secondary-action\">\n            Already have an account?{\" \"}\n            <Link to=\"/login\" className={\"link\"}>Login here</Link>\n            \n          </p>\n        </Stack>\n      </Box>\n      <Footer />\n    </Box>\n  );\n};\n\nexport default Register;\n","/Users/decagon/Desktop/Ecommerce-Projects/FashionHub/src/components/Products.js",["61","62","63","64","65","66","67","68","69"],"import { Button, Stack,Avatar } from \"@mui/material\";\nimport { Search, SentimentDissatisfied } from \"@mui/icons-material\";\nimport {\n  CircularProgress,\n  Grid,\n  Card,\n  InputAdornment,\n  TextField,\n} from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport axios from \"axios\";\nimport { useSnackbar } from \"notistack\";\nimport React, { useEffect, useState ,useCallBack} from \"react\";\nimport { config } from \"../App\";\nimport Footer from \"./Footer\";\nimport Header from \"./Header\";\nimport \"./Products.css\";\nimport ProductCard from \"./ProductCard\";\nimport Cart,{generateCartItemsFrom} from \"./Cart\";\n\n// Definition of Data Structures used\n/**\n * @typedef {Object} Product - Data on product available to buy\n * \n * @property {string} name - The name or title of the product\n * @property {string} category - The category that the product belongs to\n * @property {number} cost - The price to buy the product\n * @property {number} rating - The aggregate rating of the product (integer out of five)\n * @property {string} image - Contains URL for the product image\n * @property {string} _id - Unique ID for the product\n */\n\n\nconst Products = () => {\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n  const [productData,updateProduct]=useState([]);\n  const [isFetching,updateFecthed]=useState(false);\n  const [productNotFound,updateProductNotFound]=useState(false);\n  const [timerId,udpateTimerId]=useState(\"\");\n  const [userLoggedIn,updateUserLoggedIn]=useState(false);\n  const [cartData,updateCartData]=useState([]);\n  const [userCartItems,updateUserCartItems]=useState([]);\n  const [userToken,updateUserToken]=useState(\"\");\n\n  // TODO: CRIO_TASK_MODULE_PRODUCTS - Fetch products data and store it\n  /**\n   * Make API call to get the products list and store it to display the products\n   *\n   * @returns { Array.<Product> }\n   *      Array of objects with complete data on all available products\n   *\n   * API endpoint - \"GET /products\"\n   *\n   * Example for successful response from backend:\n   * HTTP 200\n   * [\n   *      {\n   *          \"name\": \"iPhone XR\",\n   *          \"category\": \"Phones\",\n   *          \"cost\": 100,\n   *          \"rating\": 4,\n   *          \"image\": \"https://i.imgur.com/lulqWzW.jpg\",\n   *          \"_id\": \"v4sLtEcMpzabRyfx\"\n   *      },\n   *      {\n   *          \"name\": \"Basketball\",\n   *          \"category\": \"Sports\",\n   *          \"cost\": 100,\n   *          \"rating\": 5,\n   *          \"image\": \"https://i.imgur.com/lulqWzW.jpg\",\n   *          \"_id\": \"upLK9JbQ4rMhTwt4\"\n   *      }\n   * ]\n   *\n   * Example for failed response from backend:\n   * HTTP 500\n   * {\n   *      \"success\": false,\n   *      \"message\": \"Something went wrong. Check the backend console for more details\"\n   * }\n   */\n  const performAPICall = async () => {\n    try{\n      updateFecthed(true)\n      let url=config.endpoint;\n     let product= await axios.get(`${url}/products`);\n     updateProduct(product.data);\n     updateFecthed(false);\n     return product.data;\n    }catch(e){\n      console.log(e.message)\n    }\n  \n  };\n\n  // TODO: CRIO_TASK_MODULE_PRODUCTS - Implement search logic\n  /**\n   * Definition for search handler\n   * This is the function that is called on adding new search keys\n   *\n   * @param {string} text\n   *    Text user types in the search bar. To filter the displayed products based on this text.\n   *\n   * @returns { Array.<Product> }\n   *      Array of objects with complete data on filtered set of products\n   *\n   * API endpoint - \"GET /products/search?value=<search-query>\"\n   *\n   */\n  const performSearch = async (text) => {\n    try{\n      // updateProductNotFound(false)\n      let url=config.endpoint;\n     let product= await axios.get(`${url}/products/search?value=${text}`).catch((e)=>{updateProductNotFound(true)})\n     \n     if(product.data){\n      updateProductNotFound(false);\n      updateProduct(product.data);\n     }\n    }catch(e){\n      console.log(e.message)\n    }\n  };\n\n  // TODO: CRIO_TASK_MODULE_PRODUCTS - Optimise API calls with debounce search implementation\n  /**\n   * Definition for debounce handler\n   * With debounce, this is the function to be called whenever the user types text in the searchbar field\n   *\n   * @param {{ target: { value: string } }} event\n   *    JS event object emitted from the search input field\n   *\n   * @param {NodeJS.Timeout} debounceTimeout\n   *    Timer id set for the previous debounce call\n   *\n   */\n  const debounceSearch = (event, debounceTimeout) => {\n    clearTimeout(debounceTimeout);\n    // wait for 500 ms and make a call\n    // 1st request\n    let timerId = setTimeout(() => performSearch(event), 500);\n    udpateTimerId(timerId);\n  };\n\n  useEffect( ()=>{\n    async function onLoad(){\n       const product=await performAPICall();\n      let user=localStorage.getItem('username');\n      {user && updateUserLoggedIn(true)} \n      let token=localStorage.getItem('token');\n      if(token){\n        updateUserToken(token);\n        const cartItems=await fetchCart(token);\n        //console.log()\n        updateUserCartItems(cartItems);// Array of objects with productId and quantity of products in cart\n        const cartData=await generateCartItemsFrom(cartItems,product)\n        updateCartData(cartData);\n      }\n    }\n    onLoad();\n  },[])\n\n \n\n\n/**\n   * Perform the API call to fetch the user's cart and return the response\n   *\n   * @param {string} token - Authentication token returned on login\n   *\n   * @returns { Array.<{ productId: string, qty: number }> | null }\n   *    The response JSON object\n   *\n   * Example for successful response from backend:\n   * HTTP 200\n   * [\n   *      {\n   *          \"productId\": \"KCRwjF7lN97HnEaY\",\n   *          \"qty\": 3\n   *      },\n   *      {\n   *          \"productId\": \"BW0jAAeDJmlZCF8i\",\n   *          \"qty\": 1\n   *      }\n   * ]\n   *\n   * Example for failed response from backend:\n   * HTTP 401\n   * {\n   *      \"success\": false,\n   *      \"message\": \"Protected route, Oauth2 Bearer token not found\"\n   * }\n   */\n const fetchCart = async (token) => {\n  if (!token) return;\n\n  try {\n    // TODO: CRIO_TASK_MODULE_CART - Pass Bearer token inside \"Authorization\" header to get data from \"GET /cart\" API and return the response data\n   let url=config.endpoint+'/cart';\n   let cartDatas=await axios.get(url,{headers:{Authorization:`Bearer ${token}`}});\n   return cartDatas.data;\n\n  } catch (e) {\n    if (e.response && e.response.status === 400) {\n      enqueueSnackbar(e.response.data.message, { variant: \"error\" });\n    } else {\n      enqueueSnackbar(\n        \"Could not fetch cart details. Check that the backend is running, reachable and returns valid JSON.\",\n        {\n          variant: \"error\",\n        }\n      );\n    }\n    return null;\n  }\n};\n\n\n// TODO: CRIO_TASK_MODULE_CART - Return if a product already exists in the cart\n/**\n * Return if a product already is present in the cart\n *\n * @param { Array.<{ productId: String, quantity: Number }> } items\n *    Array of objects with productId and quantity of products in cart\n * @param { String } productId\n *    Id of a product to be checked\n *\n * @returns { Boolean }\n *    Whether a product of given \"productId\" exists in the \"items\" array\n *\n */\nconst isItemInCart = (items, productId) => {\n  // items is whole data array\n  for(let i=0;i<items.length;i++){\n    // console.log(items[i])\n      if(items[i]['_id']===productId){\n        enqueueSnackbar('Item already in cart. Use the cart sidebar to update quantity or remove item.',{variant:\"warning\"});\n        return true;\n      }\n  }\n  return false;\n};\n\n/**\n * Perform the API call to add or update items in the user's cart and update local cart data to display the latest cart\n *\n * @param {string} token\n *    Authentication token returned on login\n * @param { Array.<{ productId: String, quantity: Number }> } items\n *    Array of objects with productId and quantity of products in cart\n * @param { Array.<Product> } products\n *    Array of objects with complete data on all available products\n * @param {string} productId\n *    ID of the product that is to be added or updated in cart\n * @param {number} qty\n *    How many of the product should be in the cart\n * @param {boolean} options\n *    If this function was triggered from the product card's \"Add to Cart\" button\n *\n * Example for successful response from backend:\n * HTTP 200 - Updated list of cart items\n * [\n *      {\n *          \"productId\": \"KCRwjF7lN97HnEaY\",\n *          \"qty\": 3\n *      },\n *      {\n *          \"productId\": \"BW0jAAeDJmlZCF8i\",\n *          \"qty\": 1\n *      }\n * ]\n *\n * Example for failed response from backend:\n * HTTP 404 - On invalid productId\n * {\n *      \"success\": false,\n *      \"message\": \"Product doesn't exist\"\n * }\n */\nconst addToCart = async (token, items,products,productId,qty,options = { preventDuplicate: false }) => {\n\n      if(options.preventDuplicate===true){\n        try{\n            let url=config.endpoint+'/cart';\n            let res=await axios.post(url,{\"productId\":productId,\"qty\":qty},{headers:{Authorization:`Bearer ${token}`}});\n            const cartData=await generateCartItemsFrom(res.data,products)\n            updateCartData(cartData);\n\n        }catch(e){\n          console.log(e)\n        }\n      }\n      else {\n            // udpate only quantity\n            // items.qty++\n            let index;\n            for(let i=0;i<items.length;i++){\n              if(items[i]['productId']===productId){\n                index=i;\n              }\n            }\n            if(options.preventDuplicate==='handleAdd'){\n              items[index]['qty']++;\n            }\n            else{\n                items[index]['qty']--;\n            }\n            //  udpate ite4ms\n            let url=config.endpoint+'/cart';\n            let res=await axios.post(url,{\"productId\":productId,\"qty\":items[index][\"qty\"]},{headers:{Authorization:`Bearer ${token}`}});\n            const cartData=await generateCartItemsFrom(res.data,products)\n            updateCartData(cartData);\n      }\n};\n\n\nlet addItems=(e)=>{\n  {!userLoggedIn && enqueueSnackbar(\"Login to add an item to the Cart\",{variant:\"warning\"}) };\n  if(userLoggedIn){\n    let result=isItemInCart(cartData,e.target.value)\n    if(!result){\n      addToCart(userToken,userCartItems,productData,e.target.value,1,{preventDuplicate: true});\n    }else{\n      enqueueSnackbar('Item already in cart. Use the cart sidebar to update quantity or remove item.',{variant:\"warning\"});\n    }\n  }\n  \n  \n}\n\nconst onButtonClick=(id,handle)=>{\n  console.log(\"Button Click\")\n  console.log(id,handle)\n// token, items,products,productId,qty,options = { preventDuplicate: false }\n  addToCart(userToken,userCartItems,productData,id,null, { preventDuplicate: handle })\n};\n\n  return (\n    <div>\n      <Header  hasHiddenAuthButtons={false}>\n        {/* TODO: CRIO_TASK_MODULE_PRODUCTS - Display search bar in the header for Products page */}\n        <TextField\n        className=\"search-desktop\"\n        size=\"small\"\n        onChange={(e)=>{debounceSearch(e.target.value,timerId)}}\n        InputProps={{\n          endAdornment: (\n            <InputAdornment position=\"end\">\n              <Search color=\"primary\" />\n            </InputAdornment>\n          ),\n        }}\n        placeholder=\"Search for items/categories\"\n        name=\"search\"\n      />\n\n      </Header>\n\n      {/* Search view for mobiles */}\n      <TextField\n        className=\"search-mobile\"\n        size=\"small\"\n        fullWidth\n        onChange={(e)=>{debounceSearch(e.target.value,timerId)}}\n        InputProps={{\n          endAdornment: (\n            <InputAdornment position=\"end\">\n              <Search color=\"primary\" />\n            </InputAdornment>\n          ),\n        }}\n        placeholder=\"Search for items/categories\"\n        name=\"search\"\n      />\n\n       <Grid container justifyContent=\"center\" >\n         <Grid item className=\"product-grid\">\n           <Box className=\"hero\">\n             <p className=\"hero-heading\">\n               India’s <span className=\"hero-highlight\">FASTEST DELIVERY</span>{\" \"}\n               to your door step\n             </p>\n           </Box>\n         </Grid>\n       </Grid>\n\n      \n      {\n        isFetching?<div className={\"loading\"}>\n                      <CircularProgress />\n                      <h3>Loading Products</h3>\n                    </div>\n                  : !productNotFound?\n                  <>\n                  {\n                    !userLoggedIn?\n                    <Grid container >\n                    <Grid container spacing={{ xs: 2, md: 3 ,lg:1 }} >\n                      {productData.map((x)=>\n                         (<Grid item lg={3} md={6} sm={6} xs={6} mt={2} mb={2} key={x['_id']}  >\n                          <ProductCard product={x} handleAddToCart={(e)=>{addItems(e)}}/>\n                        </Grid>\n                        )\n                        )}\n                    </Grid>\n                  </Grid>:\n                        <Grid container  >\n                        <Grid container spacing={{ xs: 2, md: 3 ,lg:1 }} md={9} >\n                          {productData.map((x)=>\n                             (<Grid item lg={4} md={4} sm={6} xs={6} mt={2} mb={2} key={x['_id']}  >\n                              <ProductCard product={x} handleAddToCart={(e)=>{addItems(e)}}/>\n                            </Grid>\n                            )\n                            )}\n                        </Grid>\n                        <Grid md={3} sm={12} xs={12} sx={{backgroundColor:'#E9F5E1'}} >\n                           <Cart product={productData} items={cartData} handleQuantity={onButtonClick}  />\n                           {/* handleQuantity={onButtonClick} */}\n                        </Grid>\n                      </Grid>\n                  }\n                  </>\n                    :<div className={\"loading\"}>\n                    <SentimentDissatisfied/>\n                    <h3>No products found</h3>\n                  </div>          \n      }\n      <Footer />\n    </div>\n  );\n};\n\nexport default Products;\n","/Users/decagon/Desktop/Ecommerce-Projects/FashionHub/src/components/Footer.js",[],"/Users/decagon/Desktop/Ecommerce-Projects/FashionHub/src/components/Header.js",["70"],"import ArrowBackIcon from \"@mui/icons-material/ArrowBack\";\nimport { Avatar, Button, Stack } from \"@mui/material\";\nimport {Link,useHistory} from 'react-router-dom';\nimport Box from \"@mui/material/Box\";\nimport React from \"react\";\nimport \"./Header.css\";\n\nconst Header = ({ children, hasHiddenAuthButtons }) => {\n  let history=useHistory();\n  \n  let userName=localStorage.getItem(\"username\");\n\n\nconst clear=()=>{\n  localStorage.clear();\n  window.location.reload();\n}\n\n\n    return (\n      <Box className=\"header\">\n      <Box className=\"header-title\">\n            <img src=\"logo_light.svg\" alt=\"QKart-icon\"></img>\n        </Box>\n        {children}\n      {hasHiddenAuthButtons?(\n        <Button\n          className=\"explore-button\"\n          startIcon={<ArrowBackIcon />}\n          variant=\"text\"\n          onClick={(e)=>{history.push(\"/\")}}\n        >\n          Back to explore\n        </Button>\n      ):(userName?(\n        <Stack direction=\"row\" spacing={2} alignItems=\"center\">\n          <Avatar alt={userName}  src=\"/public/avatar.png\" />\n          <p> {userName}</p>\n          <Button  variant=\"contained\"\n          onClick={clear}\n          >LOGOUT</Button></Stack>\n        ):(\n          <Stack direction=\"row\" spacing={2}>\n            <Button  variant=\"contained\"\n              onClick={(e)=>{history.push(\"/login\")}}\n            >LOGIN</Button>\n          <Button  variant=\"contained\" onClick={(e)=>{history.push(\"/register\")}}>REGISTER</Button>\n          </Stack>)\n          )}\n     </Box>\n     \n    );\n};\n\nexport default Header;\n","/Users/decagon/Desktop/Ecommerce-Projects/FashionHub/src/components/Cart.js",["71","72","73","74"],"import {\n  AddOutlined,\n  RemoveOutlined,\n  ShoppingCart,\n  ShoppingCartOutlined,\n} from \"@mui/icons-material\";\nimport { Button, IconButton, Stack } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport React ,{useCallBack}from \"react\";\nimport { useHistory,Link } from \"react-router-dom\";\nimport \"./Cart.css\";\n\n// Definition of Data Structures used\n/**\n * @typedef {Object} Product - Data on product available to buy\n * \n * @property {string} name - The name or title of the product\n * @property {string} category - The category that the product belongs to\n * @property {number} cost - The price to buy the product\n * @property {number} rating - The aggregate rating of the product (integer out of five)\n * @property {string} image - Contains URL for the product image\n * @property {string} _id - Unique ID for the product\n */\n\n/**\n * @typedef {Object} CartItem -  - Data on product added to cart\n * \n * @property {string} name - The name or title of the product in cart\n * @property {string} qty - The quantity of product added to cart\n * @property {string} category - The category that the product belongs to\n * @property {number} cost - The price to buy the product\n * @property {number} rating - The aggregate rating of the product (integer out of five)\n * @property {string} image - Contains URL for the product image\n * @property {string} productId - Unique ID for the product\n */\n\n/**\n * Returns the complete data on all products in cartData by searching in productsData\n *\n * @param { Array.<{ productId: String, qty: Number }> } cartData\n *    Array of objects with productId and quantity of products in cart\n * \n * @param { Array.<Product> } productsData\n *    Array of objects with complete data on all available products\n *\n * @returns { Array.<CartItem> }\n *    Array of objects with complete data on products in cart\n *\n */\nexport const generateCartItemsFrom = (cartData, productsData) => {\n  // console.log(cartData)\n    let map=new Map();\n    for(let i=0;i<productsData.length;i++){\n      map.set(productsData[i][\"_id\"],productsData[i]);\n    }\n    let cartItems=[];\n    \n\n    cartData.map((x)=>{\n      let value=map.get(x['productId']);\n      value[\"quantity\"]=x.qty;\n      cartItems.push(value)\n    })\n\n    // for(let i=0;i<cartData.length;i++){\n    //   let value=map.get(cartData[i][\"productId\"]);\n    //   value[\"quantity\"]=cartData[i].qty;\n    //   console.log(value)\n    //   cartItems.push(value)\n    // }\n    return cartItems;\n};\n\n/**\n * Get the total value of all products added to the cart\n *\n * @param { Array.<CartItem> } items\n *    Array of objects with complete data on products added to the cart\n *\n * @returns { Number }\n *    Value of all items in the cart\n *\n */\nexport const getTotalCartValue = (items = []) => {\n\n  let value=0;\n  for(let i=0;i<items.length;i++){\n    value+=items[i].quantity*items[i].cost;\n  }\nreturn value;\n\n};\n\nexport const getTotalItems=(items=[])=>{\n  let qty=0;\n  for(let i=0;i<items.length;i++){\n    qty+=items[i].quantity;\n  }\n  return  qty;\n}\n\n/**\n * Component to display the current quantity for a product and + and - buttons to update product quantity on cart\n * \n * @param {Number} value\n *    Current quantity of product in cart\n * \n * @param {Function} handleAdd\n *    Handler function which adds 1 more of a product to cart\n * \n * @param {Function} handleDelete\n *    Handler function which reduces the quantity of a product in cart by 1\n * \n * \n */\nconst ItemQuantity = ({value,handleAdd,handleDelete,productId}) => {\n\n\n  return (\n    <Stack direction=\"row\" alignItems=\"center\">\n          <IconButton size=\"small\" color=\"primary\" onClick={(e)=>{handleDelete(productId,'-')}}>\n          <RemoveOutlined />\n          </IconButton>\n          <Box padding=\"0.5rem\" data-testid=\"item-qty\">\n           {value}\n          </Box>\n          <IconButton size=\"small\" color=\"primary\" onClick={(e)=>{handleAdd(productId,\"handleAdd\")}}>\n           <AddOutlined />\n          </IconButton>\n    </Stack>\n  );\n};\n\n/**\n * Component to display the Cart view\n * \n * @param { Array.<Product> } products\n *    Array of objects with complete data of all available products\n * \n * @param { Array.<Product> } items\n *    Array of objects with complete data on products in cart\n * \n * @param {Function} handleDelete\n *    Current quantity of product in cart\n * \n * \n */\n\n\nfunction DisplayCartItems(props){\n  const {image,name,cost,quantity,\"_id\":id}=props.items;\n  \n  return (\n    \n    <Box display=\"flex\" alignItems=\"flex-start\" padding=\"1rem\">\n        <Box className=\"image-container\">\n            <img\n                // Add product image\n                src={image}\n                // Add product name as alt eext\n                alt={name}\n                width=\"100%\"\n                height=\"100%\"\n            />\n        </Box>\n        <Box\n            display=\"flex\"\n            flexDirection=\"column\"\n            justifyContent=\"space-between\"\n            height=\"6rem\"\n            paddingX=\"1rem\"\n        >\n            <div>{name}</div>\n            {/* Add product name */}\n            <Box\n                display=\"flex\"\n                justifyContent=\"space-between\"\n                alignItems=\"center\"\n            >\n              {\n                !props.isReadOnly?\n                    <ItemQuantity\n                    value={quantity}\n                    handleAdd={props.buttonClick}\n                    handleDelete={props.buttonClick}\n                    productId={id}\n                  // Add required props by checking implementation\n                  />\n                  :\n                  <Box>\n                    Qty:{quantity}\n                  </Box>\n              }\n            \n            <Box padding=\"0.5rem\" fontWeight=\"700\">\n                ${cost}\n                {/* Add product cost */}\n            </Box>\n            </Box>\n        </Box>\n    </Box>\n  )\n}\n\n\n\n\nconst Cart = ({products,items = [],handleQuantity,isReadOnly}) => {\n let history=useHistory();\n  if (!items.length) {\n    return (\n      <Box className=\"cart empty\">\n        <ShoppingCartOutlined className=\"empty-cart-icon\" />\n        <Box color=\"#aaa\" textAlign=\"center\">\n          Cart is empty. Add more items to the cart to checkout.\n        </Box>\n      </Box>\n    );\n  }\n\n  return (\n    <>\n      <Box className=\"cart\" >\n        {/* TODO: CRIO_TASK_MODULE_CART - Display view for each cart item with non-zero quantity */}\n\n          {\n            items.map((values)=>{\n                 return (isReadOnly ? (<DisplayCartItems isReadOnly items={values} buttonClick={handleQuantity} key={values['_id']}/>)\n                :(<DisplayCartItems  items={values} buttonClick={handleQuantity} key={values['_id']}/>)\n              )\n            }\n            )\n          }\n\n        <Box\n          padding=\"1rem\"\n          display=\"flex\"\n          justifyContent=\"space-between\"\n          alignItems=\"center\"\n        >\n          <Box color=\"#3C3C3C\" alignSelf=\"center\">\n            Order total\n          </Box>\n          <Box\n            color=\"#3C3C3C\"\n            fontWeight=\"700\"\n            fontSize=\"1.5rem\"\n            alignSelf=\"center\"\n            data-testid=\"cart-total\"\n          >\n            ${getTotalCartValue(items)}\n          </Box>\n        </Box>\n        \n          <Box display=\"flex\" justifyContent=\"flex-end\" className=\"cart-footer\">\n            {\n              // console.log(window.location.pathname)\n              window.location.pathname===\"/checkout\"?\n                  <></>\n                  :\n                  <Button\n                  color=\"primary\"\n                  variant=\"contained\"\n                  onClick={(e)=>{history.push('/checkout')}}\n                  className=\"checkout-btn\"\n                  >\n                  Checkout\n                  </Button>\n            }\n          </Box>  \n      </Box>\n    </>\n  );\n};\n\nexport default Cart;\n","/Users/decagon/Desktop/Ecommerce-Projects/FashionHub/src/components/ProductCard.js",[],{"ruleId":"75","severity":1,"message":"76","line":6,"column":8,"nodeType":"77","messageId":"78","endLine":6,"endColumn":16},{"ruleId":"75","severity":1,"message":"79","line":7,"column":22,"nodeType":"77","messageId":"78","endLine":7,"endColumn":26},{"ruleId":"75","severity":1,"message":"80","line":1,"column":18,"nodeType":"77","messageId":"78","endLine":1,"endColumn":34},{"ruleId":"81","severity":1,"message":"82","line":94,"column":5,"nodeType":"83","messageId":"84","endLine":94,"endColumn":43},{"ruleId":"81","severity":1,"message":"82","line":110,"column":9,"nodeType":"83","messageId":"84","endLine":110,"endColumn":49},{"ruleId":"75","severity":1,"message":"85","line":1,"column":10,"nodeType":"77","messageId":"78","endLine":1,"endColumn":16},{"ruleId":"75","severity":1,"message":"86","line":1,"column":18,"nodeType":"77","messageId":"78","endLine":1,"endColumn":23},{"ruleId":"75","severity":1,"message":"87","line":1,"column":24,"nodeType":"77","messageId":"78","endLine":1,"endColumn":30},{"ruleId":"75","severity":1,"message":"88","line":6,"column":3,"nodeType":"77","messageId":"78","endLine":6,"endColumn":7},{"ruleId":"75","severity":1,"message":"89","line":13,"column":38,"nodeType":"77","messageId":"78","endLine":13,"endColumn":49},{"ruleId":"75","severity":1,"message":"90","line":35,"column":28,"nodeType":"77","messageId":"78","endLine":35,"endColumn":41},{"ruleId":"81","severity":1,"message":"82","line":149,"column":7,"nodeType":"83","messageId":"84","endLine":149,"endColumn":41},{"ruleId":"91","severity":1,"message":"92","line":161,"column":5,"nodeType":"93","endLine":161,"endColumn":7,"suggestions":"94"},{"ruleId":"81","severity":1,"message":"82","line":318,"column":3,"nodeType":"83","messageId":"84","endLine":318,"endColumn":94},{"ruleId":"75","severity":1,"message":"79","line":3,"column":9,"nodeType":"77","messageId":"78","endLine":3,"endColumn":13},{"ruleId":"75","severity":1,"message":"95","line":4,"column":3,"nodeType":"77","messageId":"78","endLine":4,"endColumn":15},{"ruleId":"75","severity":1,"message":"89","line":9,"column":16,"nodeType":"77","messageId":"78","endLine":9,"endColumn":27},{"ruleId":"75","severity":1,"message":"79","line":10,"column":21,"nodeType":"77","messageId":"78","endLine":10,"endColumn":25},{"ruleId":"96","severity":1,"message":"97","line":59,"column":21,"nodeType":"98","messageId":"99","endLine":59,"endColumn":23},"no-unused-vars","'ipConfig' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'CircularProgress' is defined but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'Button' is defined but never used.","'Stack' is defined but never used.","'Avatar' is defined but never used.","'Card' is defined but never used.","'useCallBack' is defined but never used.","'closeSnackbar' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchCart'. Either include it or remove the dependency array.","ArrayExpression",["100"],"'ShoppingCart' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",{"desc":"101","fix":"102"},"Update the dependencies array to be: [fetchCart]",{"range":"103","text":"104"},[5233,5235],"[fetchCart]"]