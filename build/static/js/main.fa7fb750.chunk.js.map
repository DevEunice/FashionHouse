{"version":3,"sources":["components/Footer.js","components/Header.js","components/Register.js","components/ProductCard.js","components/Cart.js","components/Products.js","components/Login.js","components/Checkout.js","components/Thanks.js","App.js","theme.js","index.js"],"names":["Footer","_jsxs","Box","className","children","_jsx","src","alt","Header","_ref","hasHiddenAuthButtons","history","useHistory","userName","localStorage","getItem","Button","startIcon","ArrowBackIcon","variant","onClick","e","push","Stack","direction","spacing","alignItems","Avatar","clear","window","location","reload","Register","enqueueSnackbar","useSnackbar","_useState","useState","_useState2","_slicedToArray","username","updateUserName","_useState3","_useState4","password","updatePassword","_useState5","_useState6","confirmPassword","updateConfirmPasswrod","_useState7","_useState8","loader","updateLoader","register","_asyncToGenerator","_regeneratorRuntime","mark","_callee","formData","url","request","wrap","_context","prev","next","config","endpoint","console","log","axios","post","concat","sent","data","t0","catch","response","message","stop","_x","apply","arguments","validateInput","lenUsername","length","lenpass","display","flexDirection","justifyContent","minHeight","TextField","id","label","title","name","placeholder","onChange","target","value","fullWidth","type","helperText","sx","CircularProgress","Link","to","ProductCard","product","handleAddToCart","cost","rating","image","_id","Card","maxWidth","CardActionArea","CardMedia","component","height","CardContent","Typography","gutterBottom","Rating","readOnly","CardActions","size","color","AddShoppingCartOutlined","generateCartItemsFrom","cartData","productsData","map","Map","i","set","cartItems","x","get","qty","getTotalCartValue","items","undefined","quantity","getTotalItems","ItemQuantity","handleAdd","handleDelete","productId","IconButton","RemoveOutlined","padding","AddOutlined","DisplayCartItems","props","_props$items","width","paddingX","isReadOnly","buttonClick","fontWeight","Cart","_ref2","products","_ref2$items","handleQuantity","_Fragment","values","alignSelf","fontSize","pathname","ShoppingCartOutlined","textAlign","Products","_useSnackbar","closeSnackbar","productData","updateProduct","isFetching","updateFecthed","productNotFound","updateProductNotFound","timerId","udpateTimerId","_useState9","_useState10","userLoggedIn","updateUserLoggedIn","_useState11","_useState12","updateCartData","_useState13","_useState14","userCartItems","updateUserCartItems","_useState15","_useState16","userToken","updateUserToken","performAPICall","abrupt","performSearch","_callee2","text","_context2","debounceSearch","event","debounceTimeout","clearTimeout","setTimeout","useEffect","_onLoad","_callee3","token","_cartData","_context3","fetchCart","onLoad","_ref3","_callee4","cartDatas","_context4","headers","Authorization","status","_x2","addToCart","_ref4","_callee5","options","res","_cartData2","index","_url","_res","_cartData3","_args5","_context5","preventDuplicate","_x3","_x4","_x5","_x6","_x7","addItems","isItemInCart","InputProps","endAdornment","InputAdornment","position","Search","Grid","container","item","SentimentDissatisfied","xs","md","lg","sm","mt","mb","backgroundColor","handle","Login","updateUsername","udpatePassword","login","_res$data","_username","balance","success","persistLogin","datas","setItem","AddNewAddressView","newAddress","handleNewAddress","addAddress","multiline","minRows","my","isAddingNewAddress","curr","_objectSpread","Checkout","classname","setItems","setProducts","all","selected","addresses","setAddresses","setNewAddress","getProducts","getAddresses","_ref5","deleteAddress","_ref6","addressId","delete","validateRequest","performCheckout","_ref7","_callee6","wallet","remain","_context6","_x8","_x9","onLoadHandler","_ref8","_callee7","cartDetails","_context7","Divider","add","Delete","currNewAddress","CreditCard","bgcolor","p","Thanks","App","Switch","Route","path","Product","theme","createTheme","typography","fontFamily","palette","primary","light","main","dark","contrastText","ReactDOM","render","React","StrictMode","ThemeProvider","BrowserRouter","SnackbarProvider","maxSnack","anchorOrigin","vertical","horizontal","document","getElementById"],"mappings":"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","file":"static/js/main.fa7fb750.chunk.js","sourcesContent":["import { Box } from \"@mui/system\";\nimport React from \"react\";\nimport \"./Footer.css\";\n\nconst Footer = () => {\n  return (\n    <Box className=\"footer\">\n      <Box>\n        <img src=\"logo_dark.svg\" alt=\"QKart-icon\"></img>\n      </Box>\n      <p className=\"footer-text\">\n        QKart is your one stop solution to the buy the latest trending items\n        with India's Fastest Delivery to your doorstep\n      </p>\n    </Box>\n  );\n};\n\nexport default Footer;\n","import ArrowBackIcon from \"@mui/icons-material/ArrowBack\";\nimport { Avatar, Button, Stack } from \"@mui/material\";\nimport {Link,useHistory} from 'react-router-dom';\nimport Box from \"@mui/material/Box\";\nimport React from \"react\";\nimport \"./Header.css\";\n\nconst Header = ({ children, hasHiddenAuthButtons }) => {\n  let history=useHistory();\n  \n  let userName=localStorage.getItem(\"username\");\n\n\nconst clear=()=>{\n  localStorage.clear();\n  window.location.reload();\n}\n\n\n    return (\n      <Box className=\"header\">\n      <Box className=\"header-title\">\n            <img src=\"logo_light.svg\" alt=\"QKart-icon\"></img>\n        </Box>\n        {children}\n      {hasHiddenAuthButtons?(\n        <Button\n          className=\"explore-button\"\n          startIcon={<ArrowBackIcon />}\n          variant=\"text\"\n          onClick={(e)=>{history.push(\"/\")}}\n        >\n          Back to explore\n        </Button>\n      ):(userName?(\n        <Stack direction=\"row\" spacing={2} alignItems=\"center\">\n          <Avatar alt={userName}  src=\"/public/avatar.png\" />\n          <p> {userName}</p>\n          <Button  variant=\"contained\"\n          onClick={clear}\n          >LOGOUT</Button></Stack>\n        ):(\n          <Stack direction=\"row\" spacing={2}>\n            <Button  variant=\"contained\"\n              onClick={(e)=>{history.push(\"/login\")}}\n            >LOGIN</Button>\n          <Button  variant=\"contained\" onClick={(e)=>{history.push(\"/register\")}}>REGISTER</Button>\n          </Stack>)\n          )}\n     </Box>\n     \n    );\n};\n\nexport default Header;\n","import { Button, CircularProgress, Stack, TextField } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport axios from \"axios\";\nimport { useSnackbar } from \"notistack\";\nimport React, { useState } from \"react\";\nimport { config } from \"../App\";\nimport Footer from \"./Footer\";\nimport Header from \"./Header\";\nimport \"./Register.css\";\nimport { useHistory } from \"react-router-dom\";\nimport {Link} from \"react-router-dom\";\n\nconst Register = () => {\n  const { enqueueSnackbar } = useSnackbar();\n  const [username,updateUserName]=useState(\"\");\n  const [password,updatePassword]=useState(\"\");\n  const [confirmPassword,updateConfirmPasswrod]=useState(\"\");\n  const [loader,updateLoader]=useState(false);\n  const history=useHistory();\n\n  // TODO: CRIO_TASK_MODULE_REGISTER - Implement the register function\n  /**\n   * Definition for register handler\n   * - Function to be called when the user clicks on the register button or submits the register form\n   *\n   * @param {{ username: string, password: string, confirmPassword: string }} formData\n   *  Object with values of username, password and confirm password user entered to register\n   *\n   * API endpoint - \"POST /auth/register\"\n   *\n   * Example for successful response from backend for the API call:\n   * HTTP 201\n   * {\n   *      \"success\": true,\n   * }\n   *\n   * Example for failed response from backend for the API call:\n   * HTTP 400\n   * {\n   *      \"success\": false,\n   *      \"message\": \"Username is already taken\"\n   * }\n   */\n  const register = async (formData) => {\n    updateLoader(true)\n\n    let url=config.endpoint;\n    console.log(url)\n     try{\n      let request = await axios.post(`${url}/auth/register`,{\n        \"username\": formData.username,\n        \"password\": formData.password\n        })\n        // console.log(request.data.data)\n        console.log(request.data)\n        updateLoader(false)\n      enqueueSnackbar(\"Registered successfully\",{ variant: 'success' })\n      \n      history.push(\"/login\")\n      \n    }\n    catch(e){\n\n          axios.post(`${url}/auth/register`,{\n            \"username\":formData.username,\n            \"password\": formData.password\n              }).catch((e)=>{\n                if(e.response){\n                  enqueueSnackbar(e.response.data.message,{ variant: 'error' })\n                }\n                else {\n                  // Something happened in setting up the request that triggered an Error\n                  enqueueSnackbar(\"Something went wrong. Check that the backend is running, reachable and returns valid JSON.\",{ variant: 'error' })\n                }\n              })\n              updateLoader(false)\n       \n      }//catch function close\n      \n    } //main funciton resigter closed\n\n  \n\n  // TODO: CRIO_TASK_MODULE_REGISTER - Implement user input validation logic\n  /**\n   * Validate the input values so that any bad or illegal values are not passed to the backend.\n   *\n   * @param {{ username: string, password: string, confirmPassword: string }} data\n   *  Object with values of username, password and confirm password user entered to register\n   *\n   * @returns {boolean}\n   *    Whether validation has passed or not\n   *\n   * Return false if any validation condition fails, otherwise return true.\n   * (NOTE: The error messages to be shown for each of these cases, are given with them)\n   * -    Check that username field is not an empty value - \"Username is a required field\"\n   * -    Check that username field is not less than 6 characters in length - \"Username must be at least 6 characters\"\n   * -    Check that password field is not an empty value - \"Password is a required field\"\n   * -    Check that password field is not less than 6 characters in length - \"Password must be at least 6 characters\"\n   * -    Check that confirmPassword field has the same value as password field - Passwords do not match\n   */\n\n    let data={\n      \"username\":username,\n      \"password\":password,\n      \"confirmPassword\":confirmPassword\n    }\n\n    const eventHandler=()=>{\n        {validateInput(data) && register(data) }\n    }\n\n\n  const validateInput = (data) => {\n      const {username,password,confirmPassword}=data;\n      let lenUsername=username.length;\n      let lenpass=password.length;\n      if(lenUsername<1){\n        enqueueSnackbar(\"Username is a required field\",{ variant: 'warning' });\n        return false;\n      }else if(lenUsername<6){\n        enqueueSnackbar(\"Username must be at least 6 characters\",{ variant: 'warning' });\n        return false;\n      }else if(lenpass<1){\n        enqueueSnackbar(\"Password is a required field\",{ variant: 'warning' });\n        return false;\n      }else if(lenpass<6){\n        enqueueSnackbar(\"Password must be at least 6 characters\",{ variant: 'warning' });\n        return false;\n      }else if(password!==confirmPassword){\n        enqueueSnackbar(\"Passwords do not match\",{ variant: 'warning' });\n        return false;\n      }else{\n        return true;\n      }\n\n   \n  };\n\n  return (\n    <Box\n      display=\"flex\"\n      flexDirection=\"column\"\n      justifyContent=\"space-between\"\n      minHeight=\"100vh\"\n     \n    >\n      <Header hasHiddenAuthButtons={true} />\n      <Box className=\"content\">\n        <Stack spacing={2} className=\"form\">\n          <h2 className=\"title\">Register</h2>\n          <TextField\n            id=\"username\"\n            label=\"Username\"\n            variant=\"outlined\"\n            title=\"Username\"\n            name=\"username\"\n            placeholder=\"Enter Username\"\n            onChange={(e)=>updateUserName(e.target.value)}\n            fullWidth\n\n          />\n          <TextField\n            id=\"password\"\n            variant=\"outlined\"\n            label=\"Password\"\n            name=\"password\"\n            type=\"password\"\n            helperText=\"Password must be atleast 6 characters length\"\n            fullWidth\n            placeholder=\"Enter a password with minimum 6 characters\"\n            onChange={(e)=>updatePassword(e.target.value)}\n          />\n          <TextField\n            id=\"confirmPassword\"\n            variant=\"outlined\"\n            label=\"Confirm Password\"\n            name=\"confirmPassword\"\n            onChange={(e)=>updateConfirmPasswrod(e.target.value)}\n            type=\"password\"\n            fullWidth\n          />\n          {loader ?<Box sx={{ display: 'flex',justifyContent:\"center\" }}>\n                    <CircularProgress />\n                   </Box>\n                  :<Button onClick={eventHandler}  className=\"button\" variant=\"contained\">\n            Register Now\n           </Button>\n           }\n           \n          <p className=\"secondary-action\">\n            Already have an account?{\" \"}\n            <Link to=\"/login\" className={\"link\"}>Login here</Link>\n            \n          </p>\n        </Stack>\n      </Box>\n      <Footer />\n    </Box>\n  );\n};\n\nexport default Register;\n","import { AddShoppingCartOutlined } from \"@mui/icons-material\";\nimport {Button,Card,CardActions,CardContent,CardMedia,CardActionArea,Rating,Typography,} from \"@mui/material\";import React from \"react\";\nimport \"./ProductCard.css\";\n\nconst ProductCard = ({ product, handleAddToCart }) => {\n  const {name,cost,rating,image,_id}=product;\n// function pushToCart(e){\n//   console.log(e.target.value)\n// }\n  return (\n    <Card  className=\"card\" sx={{maxWidth:385}}>\n      <CardActionArea>\n              <CardMedia\n                component=\"img\"\n                height=\"240\"\n                image={image}\n                alt={name}\n              />\n              <CardContent>\n                <Typography gutterBottom variant=\"h5\" component=\"div\">\n                 {name}\n                </Typography>\n                <Typography gutterBottom variant=\"h6\" component=\"div\">\n                 ${cost}\n                </Typography>\n                <Rating name=\"read-only\" value={rating} readOnly />\n              </CardContent>\n            </CardActionArea>\n            <CardActions>\n              <Button size=\"\" fullWidth color=\"primary\" variant=\"contained\" value={_id} onClick={handleAddToCart}>\n              <AddShoppingCartOutlined />  ADD TO CART\n              </Button>\n            </CardActions>\n    </Card>\n  );\n};\n\nexport default ProductCard;\n","import {\n  AddOutlined,\n  RemoveOutlined,\n  ShoppingCart,\n  ShoppingCartOutlined,\n} from \"@mui/icons-material\";\nimport { Button, IconButton, Stack } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport React ,{useCallBack}from \"react\";\nimport { useHistory,Link } from \"react-router-dom\";\nimport \"./Cart.css\";\n\n// Definition of Data Structures used\n/**\n * @typedef {Object} Product - Data on product available to buy\n * \n * @property {string} name - The name or title of the product\n * @property {string} category - The category that the product belongs to\n * @property {number} cost - The price to buy the product\n * @property {number} rating - The aggregate rating of the product (integer out of five)\n * @property {string} image - Contains URL for the product image\n * @property {string} _id - Unique ID for the product\n */\n\n/**\n * @typedef {Object} CartItem -  - Data on product added to cart\n * \n * @property {string} name - The name or title of the product in cart\n * @property {string} qty - The quantity of product added to cart\n * @property {string} category - The category that the product belongs to\n * @property {number} cost - The price to buy the product\n * @property {number} rating - The aggregate rating of the product (integer out of five)\n * @property {string} image - Contains URL for the product image\n * @property {string} productId - Unique ID for the product\n */\n\n/**\n * Returns the complete data on all products in cartData by searching in productsData\n *\n * @param { Array.<{ productId: String, qty: Number }> } cartData\n *    Array of objects with productId and quantity of products in cart\n * \n * @param { Array.<Product> } productsData\n *    Array of objects with complete data on all available products\n *\n * @returns { Array.<CartItem> }\n *    Array of objects with complete data on products in cart\n *\n */\nexport const generateCartItemsFrom = (cartData, productsData) => {\n  // console.log(cartData)\n    let map=new Map();\n    for(let i=0;i<productsData.length;i++){\n      map.set(productsData[i][\"_id\"],productsData[i]);\n    }\n    let cartItems=[];\n    \n\n    cartData.map((x)=>{\n      let value=map.get(x['productId']);\n      value[\"quantity\"]=x.qty;\n      cartItems.push(value)\n    })\n\n    // for(let i=0;i<cartData.length;i++){\n    //   let value=map.get(cartData[i][\"productId\"]);\n    //   value[\"quantity\"]=cartData[i].qty;\n    //   console.log(value)\n    //   cartItems.push(value)\n    // }\n    return cartItems;\n};\n\n/**\n * Get the total value of all products added to the cart\n *\n * @param { Array.<CartItem> } items\n *    Array of objects with complete data on products added to the cart\n *\n * @returns { Number }\n *    Value of all items in the cart\n *\n */\nexport const getTotalCartValue = (items = []) => {\n\n  let value=0;\n  for(let i=0;i<items.length;i++){\n    value+=items[i].quantity*items[i].cost;\n  }\nreturn value;\n\n};\n\nexport const getTotalItems=(items=[])=>{\n  let qty=0;\n  for(let i=0;i<items.length;i++){\n    qty+=items[i].quantity;\n  }\n  return  qty;\n}\n\n/**\n * Component to display the current quantity for a product and + and - buttons to update product quantity on cart\n * \n * @param {Number} value\n *    Current quantity of product in cart\n * \n * @param {Function} handleAdd\n *    Handler function which adds 1 more of a product to cart\n * \n * @param {Function} handleDelete\n *    Handler function which reduces the quantity of a product in cart by 1\n * \n * \n */\nconst ItemQuantity = ({value,handleAdd,handleDelete,productId}) => {\n\n\n  return (\n    <Stack direction=\"row\" alignItems=\"center\">\n          <IconButton size=\"small\" color=\"primary\" onClick={(e)=>{handleDelete(productId,'-')}}>\n          <RemoveOutlined />\n          </IconButton>\n          <Box padding=\"0.5rem\" data-testid=\"item-qty\">\n           {value}\n          </Box>\n          <IconButton size=\"small\" color=\"primary\" onClick={(e)=>{handleAdd(productId,\"handleAdd\")}}>\n           <AddOutlined />\n          </IconButton>\n    </Stack>\n  );\n};\n\n/**\n * Component to display the Cart view\n * \n * @param { Array.<Product> } products\n *    Array of objects with complete data of all available products\n * \n * @param { Array.<Product> } items\n *    Array of objects with complete data on products in cart\n * \n * @param {Function} handleDelete\n *    Current quantity of product in cart\n * \n * \n */\n\n\nfunction DisplayCartItems(props){\n  const {image,name,cost,quantity,\"_id\":id}=props.items;\n  \n  return (\n    \n    <Box display=\"flex\" alignItems=\"flex-start\" padding=\"1rem\">\n        <Box className=\"image-container\">\n            <img\n                // Add product image\n                src={image}\n                // Add product name as alt eext\n                alt={name}\n                width=\"100%\"\n                height=\"100%\"\n            />\n        </Box>\n        <Box\n            display=\"flex\"\n            flexDirection=\"column\"\n            justifyContent=\"space-between\"\n            height=\"6rem\"\n            paddingX=\"1rem\"\n        >\n            <div>{name}</div>\n            {/* Add product name */}\n            <Box\n                display=\"flex\"\n                justifyContent=\"space-between\"\n                alignItems=\"center\"\n            >\n              {\n                !props.isReadOnly?\n                    <ItemQuantity\n                    value={quantity}\n                    handleAdd={props.buttonClick}\n                    handleDelete={props.buttonClick}\n                    productId={id}\n                  // Add required props by checking implementation\n                  />\n                  :\n                  <Box>\n                    Qty:{quantity}\n                  </Box>\n              }\n            \n            <Box padding=\"0.5rem\" fontWeight=\"700\">\n                ${cost}\n                {/* Add product cost */}\n            </Box>\n            </Box>\n        </Box>\n    </Box>\n  )\n}\n\n\n\n\nconst Cart = ({products,items = [],handleQuantity,isReadOnly}) => {\n let history=useHistory();\n  if (!items.length) {\n    return (\n      <Box className=\"cart empty\">\n        <ShoppingCartOutlined className=\"empty-cart-icon\" />\n        <Box color=\"#aaa\" textAlign=\"center\">\n          Cart is empty. Add more items to the cart to checkout.\n        </Box>\n      </Box>\n    );\n  }\n\n  return (\n    <>\n      <Box className=\"cart\" >\n        {/* TODO: CRIO_TASK_MODULE_CART - Display view for each cart item with non-zero quantity */}\n\n          {\n            items.map((values)=>{\n                 return (isReadOnly ? (<DisplayCartItems isReadOnly items={values} buttonClick={handleQuantity} key={values['_id']}/>)\n                :(<DisplayCartItems  items={values} buttonClick={handleQuantity} key={values['_id']}/>)\n              )\n            }\n            )\n          }\n\n        <Box\n          padding=\"1rem\"\n          display=\"flex\"\n          justifyContent=\"space-between\"\n          alignItems=\"center\"\n        >\n          <Box color=\"#3C3C3C\" alignSelf=\"center\">\n            Order total\n          </Box>\n          <Box\n            color=\"#3C3C3C\"\n            fontWeight=\"700\"\n            fontSize=\"1.5rem\"\n            alignSelf=\"center\"\n            data-testid=\"cart-total\"\n          >\n            ${getTotalCartValue(items)}\n          </Box>\n        </Box>\n        \n          <Box display=\"flex\" justifyContent=\"flex-end\" className=\"cart-footer\">\n            {\n              // console.log(window.location.pathname)\n              window.location.pathname===\"/checkout\"?\n                  <></>\n                  :\n                  <Button\n                  color=\"primary\"\n                  variant=\"contained\"\n                  onClick={(e)=>{history.push('/checkout')}}\n                  className=\"checkout-btn\"\n                  >\n                  Checkout\n                  </Button>\n            }\n          </Box>  \n      </Box>\n    </>\n  );\n};\n\nexport default Cart;\n","import { Button, Stack,Avatar } from \"@mui/material\";\nimport { Search, SentimentDissatisfied } from \"@mui/icons-material\";\nimport {\n  CircularProgress,\n  Grid,\n  Card,\n  InputAdornment,\n  TextField,\n} from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport axios from \"axios\";\nimport { useSnackbar } from \"notistack\";\nimport React, { useEffect, useState ,useCallBack} from \"react\";\nimport { config } from \"../App\";\nimport Footer from \"./Footer\";\nimport Header from \"./Header\";\nimport \"./Products.css\";\nimport ProductCard from \"./ProductCard\";\nimport Cart,{generateCartItemsFrom} from \"./Cart\";\n\n// Definition of Data Structures used\n/**\n * @typedef {Object} Product - Data on product available to buy\n * \n * @property {string} name - The name or title of the product\n * @property {string} category - The category that the product belongs to\n * @property {number} cost - The price to buy the product\n * @property {number} rating - The aggregate rating of the product (integer out of five)\n * @property {string} image - Contains URL for the product image\n * @property {string} _id - Unique ID for the product\n */\n\n\nconst Products = () => {\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n  const [productData,updateProduct]=useState([]);\n  const [isFetching,updateFecthed]=useState(false);\n  const [productNotFound,updateProductNotFound]=useState(false);\n  const [timerId,udpateTimerId]=useState(\"\");\n  const [userLoggedIn,updateUserLoggedIn]=useState(false);\n  const [cartData,updateCartData]=useState([]);\n  const [userCartItems,updateUserCartItems]=useState([]);\n  const [userToken,updateUserToken]=useState(\"\");\n\n  // TODO: CRIO_TASK_MODULE_PRODUCTS - Fetch products data and store it\n  /**\n   * Make API call to get the products list and store it to display the products\n   *\n   * @returns { Array.<Product> }\n   *      Array of objects with complete data on all available products\n   *\n   * API endpoint - \"GET /products\"\n   *\n   * Example for successful response from backend:\n   * HTTP 200\n   * [\n   *      {\n   *          \"name\": \"iPhone XR\",\n   *          \"category\": \"Phones\",\n   *          \"cost\": 100,\n   *          \"rating\": 4,\n   *          \"image\": \"https://i.imgur.com/lulqWzW.jpg\",\n   *          \"_id\": \"v4sLtEcMpzabRyfx\"\n   *      },\n   *      {\n   *          \"name\": \"Basketball\",\n   *          \"category\": \"Sports\",\n   *          \"cost\": 100,\n   *          \"rating\": 5,\n   *          \"image\": \"https://i.imgur.com/lulqWzW.jpg\",\n   *          \"_id\": \"upLK9JbQ4rMhTwt4\"\n   *      }\n   * ]\n   *\n   * Example for failed response from backend:\n   * HTTP 500\n   * {\n   *      \"success\": false,\n   *      \"message\": \"Something went wrong. Check the backend console for more details\"\n   * }\n   */\n  const performAPICall = async () => {\n    try{\n      updateFecthed(true)\n      let url=config.endpoint;\n     let product= await axios.get(`${url}/products`);\n     updateProduct(product.data);\n     updateFecthed(false);\n     return product.data;\n    }catch(e){\n      console.log(e.message)\n    }\n  \n  };\n\n  // TODO: CRIO_TASK_MODULE_PRODUCTS - Implement search logic\n  /**\n   * Definition for search handler\n   * This is the function that is called on adding new search keys\n   *\n   * @param {string} text\n   *    Text user types in the search bar. To filter the displayed products based on this text.\n   *\n   * @returns { Array.<Product> }\n   *      Array of objects with complete data on filtered set of products\n   *\n   * API endpoint - \"GET /products/search?value=<search-query>\"\n   *\n   */\n  const performSearch = async (text) => {\n    try{\n      // updateProductNotFound(false)\n      let url=config.endpoint;\n     let product= await axios.get(`${url}/products/search?value=${text}`).catch((e)=>{updateProductNotFound(true)})\n     \n     if(product.data){\n      updateProductNotFound(false);\n      updateProduct(product.data);\n     }\n    }catch(e){\n      console.log(e.message)\n    }\n  };\n\n  // TODO: CRIO_TASK_MODULE_PRODUCTS - Optimise API calls with debounce search implementation\n  /**\n   * Definition for debounce handler\n   * With debounce, this is the function to be called whenever the user types text in the searchbar field\n   *\n   * @param {{ target: { value: string } }} event\n   *    JS event object emitted from the search input field\n   *\n   * @param {NodeJS.Timeout} debounceTimeout\n   *    Timer id set for the previous debounce call\n   *\n   */\n  const debounceSearch = (event, debounceTimeout) => {\n    clearTimeout(debounceTimeout);\n    // wait for 500 ms and make a call\n    // 1st request\n    let timerId = setTimeout(() => performSearch(event), 500);\n    udpateTimerId(timerId);\n  };\n\n  useEffect( ()=>{\n    async function onLoad(){\n       const product=await performAPICall();\n      let user=localStorage.getItem('username');\n      {user && updateUserLoggedIn(true)} \n      let token=localStorage.getItem('token');\n      if(token){\n        updateUserToken(token);\n        const cartItems=await fetchCart(token);\n        //console.log()\n        updateUserCartItems(cartItems);// Array of objects with productId and quantity of products in cart\n        const cartData=await generateCartItemsFrom(cartItems,product)\n        updateCartData(cartData);\n      }\n    }\n    onLoad();\n  },[])\n\n \n\n\n/**\n   * Perform the API call to fetch the user's cart and return the response\n   *\n   * @param {string} token - Authentication token returned on login\n   *\n   * @returns { Array.<{ productId: string, qty: number }> | null }\n   *    The response JSON object\n   *\n   * Example for successful response from backend:\n   * HTTP 200\n   * [\n   *      {\n   *          \"productId\": \"KCRwjF7lN97HnEaY\",\n   *          \"qty\": 3\n   *      },\n   *      {\n   *          \"productId\": \"BW0jAAeDJmlZCF8i\",\n   *          \"qty\": 1\n   *      }\n   * ]\n   *\n   * Example for failed response from backend:\n   * HTTP 401\n   * {\n   *      \"success\": false,\n   *      \"message\": \"Protected route, Oauth2 Bearer token not found\"\n   * }\n   */\n const fetchCart = async (token) => {\n  if (!token) return;\n\n  try {\n    // TODO: CRIO_TASK_MODULE_CART - Pass Bearer token inside \"Authorization\" header to get data from \"GET /cart\" API and return the response data\n   let url=config.endpoint+'/cart';\n   let cartDatas=await axios.get(url,{headers:{Authorization:`Bearer ${token}`}});\n   return cartDatas.data;\n\n  } catch (e) {\n    if (e.response && e.response.status === 400) {\n      enqueueSnackbar(e.response.data.message, { variant: \"error\" });\n    } else {\n      enqueueSnackbar(\n        \"Could not fetch cart details. Check that the backend is running, reachable and returns valid JSON.\",\n        {\n          variant: \"error\",\n        }\n      );\n    }\n    return null;\n  }\n};\n\n\n// TODO: CRIO_TASK_MODULE_CART - Return if a product already exists in the cart\n/**\n * Return if a product already is present in the cart\n *\n * @param { Array.<{ productId: String, quantity: Number }> } items\n *    Array of objects with productId and quantity of products in cart\n * @param { String } productId\n *    Id of a product to be checked\n *\n * @returns { Boolean }\n *    Whether a product of given \"productId\" exists in the \"items\" array\n *\n */\nconst isItemInCart = (items, productId) => {\n  // items is whole data array\n  for(let i=0;i<items.length;i++){\n    // console.log(items[i])\n      if(items[i]['_id']===productId){\n        enqueueSnackbar('Item already in cart. Use the cart sidebar to update quantity or remove item.',{variant:\"warning\"});\n        return true;\n      }\n  }\n  return false;\n};\n\n/**\n * Perform the API call to add or update items in the user's cart and update local cart data to display the latest cart\n *\n * @param {string} token\n *    Authentication token returned on login\n * @param { Array.<{ productId: String, quantity: Number }> } items\n *    Array of objects with productId and quantity of products in cart\n * @param { Array.<Product> } products\n *    Array of objects with complete data on all available products\n * @param {string} productId\n *    ID of the product that is to be added or updated in cart\n * @param {number} qty\n *    How many of the product should be in the cart\n * @param {boolean} options\n *    If this function was triggered from the product card's \"Add to Cart\" button\n *\n * Example for successful response from backend:\n * HTTP 200 - Updated list of cart items\n * [\n *      {\n *          \"productId\": \"KCRwjF7lN97HnEaY\",\n *          \"qty\": 3\n *      },\n *      {\n *          \"productId\": \"BW0jAAeDJmlZCF8i\",\n *          \"qty\": 1\n *      }\n * ]\n *\n * Example for failed response from backend:\n * HTTP 404 - On invalid productId\n * {\n *      \"success\": false,\n *      \"message\": \"Product doesn't exist\"\n * }\n */\nconst addToCart = async (token, items,products,productId,qty,options = { preventDuplicate: false }) => {\n\n      if(options.preventDuplicate===true){\n        try{\n            let url=config.endpoint+'/cart';\n            let res=await axios.post(url,{\"productId\":productId,\"qty\":qty},{headers:{Authorization:`Bearer ${token}`}});\n            const cartData=await generateCartItemsFrom(res.data,products)\n            updateCartData(cartData);\n\n        }catch(e){\n          console.log(e)\n        }\n      }\n      else {\n            // udpate only quantity\n            // items.qty++\n            let index;\n            for(let i=0;i<items.length;i++){\n              if(items[i]['productId']===productId){\n                index=i;\n              }\n            }\n            if(options.preventDuplicate==='handleAdd'){\n              items[index]['qty']++;\n            }\n            else{\n                items[index]['qty']--;\n            }\n            //  udpate ite4ms\n            let url=config.endpoint+'/cart';\n            let res=await axios.post(url,{\"productId\":productId,\"qty\":items[index][\"qty\"]},{headers:{Authorization:`Bearer ${token}`}});\n            const cartData=await generateCartItemsFrom(res.data,products)\n            updateCartData(cartData);\n      }\n};\n\n\nlet addItems=(e)=>{\n  {!userLoggedIn && enqueueSnackbar(\"Login to add an item to the Cart\",{variant:\"warning\"}) };\n  if(userLoggedIn){\n    let result=isItemInCart(cartData,e.target.value)\n    if(!result){\n      addToCart(userToken,userCartItems,productData,e.target.value,1,{preventDuplicate: true});\n    }else{\n      enqueueSnackbar('Item already in cart. Use the cart sidebar to update quantity or remove item.',{variant:\"warning\"});\n    }\n  }\n  \n  \n}\n\nconst onButtonClick=(id,handle)=>{\n  console.log(\"Button Click\")\n  console.log(id,handle)\n// token, items,products,productId,qty,options = { preventDuplicate: false }\n  addToCart(userToken,userCartItems,productData,id,null, { preventDuplicate: handle })\n};\n\n  return (\n    <div>\n      <Header  hasHiddenAuthButtons={false}>\n        {/* TODO: CRIO_TASK_MODULE_PRODUCTS - Display search bar in the header for Products page */}\n        <TextField\n        className=\"search-desktop\"\n        size=\"small\"\n        onChange={(e)=>{debounceSearch(e.target.value,timerId)}}\n        InputProps={{\n          endAdornment: (\n            <InputAdornment position=\"end\">\n              <Search color=\"primary\" />\n            </InputAdornment>\n          ),\n        }}\n        placeholder=\"Search for items/categories\"\n        name=\"search\"\n      />\n\n      </Header>\n\n      {/* Search view for mobiles */}\n      <TextField\n        className=\"search-mobile\"\n        size=\"small\"\n        fullWidth\n        onChange={(e)=>{debounceSearch(e.target.value,timerId)}}\n        InputProps={{\n          endAdornment: (\n            <InputAdornment position=\"end\">\n              <Search color=\"primary\" />\n            </InputAdornment>\n          ),\n        }}\n        placeholder=\"Search for items/categories\"\n        name=\"search\"\n      />\n\n       <Grid container justifyContent=\"center\" >\n         <Grid item className=\"product-grid\">\n           <Box className=\"hero\">\n             <p className=\"hero-heading\">\n               India’s <span className=\"hero-highlight\">FASTEST DELIVERY</span>{\" \"}\n               to your door step\n             </p>\n           </Box>\n         </Grid>\n       </Grid>\n\n      \n      {\n        isFetching?<div className={\"loading\"}>\n                      <CircularProgress />\n                      <h3>Loading Products</h3>\n                    </div>\n                  : !productNotFound?\n                  <>\n                  {\n                    !userLoggedIn?\n                    <Grid container >\n                    <Grid container spacing={{ xs: 2, md: 3 ,lg:1 }} >\n                      {productData.map((x)=>\n                         (<Grid item lg={3} md={6} sm={6} xs={6} mt={2} mb={2} key={x['_id']}  >\n                          <ProductCard product={x} handleAddToCart={(e)=>{addItems(e)}}/>\n                        </Grid>\n                        )\n                        )}\n                    </Grid>\n                  </Grid>:\n                        <Grid container  >\n                        <Grid container spacing={{ xs: 2, md: 3 ,lg:1 }} md={9} >\n                          {productData.map((x)=>\n                             (<Grid item lg={4} md={4} sm={6} xs={6} mt={2} mb={2} key={x['_id']}  >\n                              <ProductCard product={x} handleAddToCart={(e)=>{addItems(e)}}/>\n                            </Grid>\n                            )\n                            )}\n                        </Grid>\n                        <Grid md={3} sm={12} xs={12} sx={{backgroundColor:'#E9F5E1'}} >\n                           <Cart product={productData} items={cartData} handleQuantity={onButtonClick}  />\n                           {/* handleQuantity={onButtonClick} */}\n                        </Grid>\n                      </Grid>\n                  }\n                  </>\n                    :<div className={\"loading\"}>\n                    <SentimentDissatisfied/>\n                    <h3>No products found</h3>\n                  </div>          \n      }\n      <Footer />\n    </div>\n  );\n};\n\nexport default Products;\n","import { Button, CircularProgress, Stack, TextField } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport axios from \"axios\";\nimport { useSnackbar } from \"notistack\";\nimport React, { useState } from \"react\";\nimport { useHistory, Link } from \"react-router-dom\";\nimport { config } from \"../App\";\nimport Footer from \"./Footer\";\nimport Header from \"./Header\";\nimport \"./Login.css\";\n\n\n\nconst Login = () => {\n  const { enqueueSnackbar } = useSnackbar();\n  const [username,updateUsername]=useState(\"\");\n  const [password,udpatePassword]=useState(\"\");\n  const history=useHistory();\n\n  // TODO: CRIO_TASK_MODULE_LOGIN - Fetch the API response\n  /**\n   * Perform the Login API call\n   * @param {{ username: string, password: string }} formData\n   *  Object with values of username, password and confirm password user entered to register\n   *\n   * API endpoint - \"POST /auth/login\"\n   *\n   * Example for successful response from backend:\n   * HTTP 201\n   * {\n   *      \"success\": true,\n   *      \"token\": \"testtoken\",\n   *      \"username\": \"criodo\",\n   *      \"balance\": 5000\n   * }\n   *\n   * Example for failed response from backend:\n   * HTTP 400\n   * {\n   *      \"success\": false,\n   *      \"message\": \"Password is incorrect\"\n   * }\n   *\n   */\n  const login = async (formData) => {\n\n  //  console.log(formData)\n    let url=config.endpoint;\n    try{\n\n      let res= await axios.post(`${url}/auth/login`,formData);\n      if(res.data.success){\n        enqueueSnackbar(\"Logged in successfully\",{ variant: 'success' });\n        let {token,username,balance}=res.data;\n        persistLogin(token,username,balance-0)\n      \n      }\n    }catch(e){\n      axios.post(`${url}/auth/login`,formData).catch((e)=>{\n        if(e.response){\n          console.log(e.response)\n          enqueueSnackbar(e.response.data.message,{ variant: 'error' })\n        }\n        else {\n          // Something happened in setting up the request that triggered an Error\n          enqueueSnackbar(\"Something went wrong. Check that the backend is running, reachable and returns valid JSON.\",{ variant: 'error' })\n        }\n      })\n    }\n\n\n  };\n\n  // TODO: CRIO_TASK_MODULE_LOGIN - Validate the input\n  /**\n   * Validate the input values so that any bad or illegal values are not passed to the backend.\n   *\n   * @param {{ username: string, password: string }} data\n   *  Object with values of username, password and confirm password user entered to register\n   *\n   * @returns {boolean}\n   *    Whether validation has passed or not\n   *\n   * Return false and show warning message if any validation condition fails, otherwise return true.\n   * (NOTE: The error messages to be shown for each of these cases, are given with them)\n   * -    Check that username field is not an empty value - \"Username is a required field\"\n   * -    Check that password field is not an empty value - \"Password is a required field\"\n   */\n\n  let datas={\n    \"username\":username,\"password\":password\n  }\n   const  evenHandler=()=>{\n    {validateInput(datas) && login(datas)}\n  }\n\n  const validateInput = ({username,password}) => {\n        if(username===\"\"){\n          enqueueSnackbar(\"Username is a required field\",{ variant: 'warning' });\n          return false;\n        }\n        if(password===\"\" || password.length<6){\n          enqueueSnackbar(\"Password is a required field\",{ variant: 'warning' });\n          return false;\n        }\n        return true;\n  };\n\n  // TODO: CRIO_TASK_MODULE_LOGIN - Persist user's login information\n  /**\n   * Store the login information so that it can be used to identify the user in subsequent API calls\n   *\n   * @param {string} token\n   *    API token used for authentication of requests after logging in\n   * @param {string} username\n   *    Username of the logged in user\n   * @param {string} balance\n   *    Wallet balance amount of the logged in user\n   *\n   * Make use of localStorage: https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage\n   * -    `token` field in localStorage can be used to store the Oauth token\n   * -    `username` field in localStorage can be used to store the username that the user is logged in as\n   * -    `balance` field in localStorage can be used to store the balance amount in the user's wallet\n   */\n\n\n  \n\n\n  const persistLogin = (token, username, balance) => {\n\n    localStorage.setItem(\"token\",token);\n    localStorage.setItem('username',username);\n    localStorage.setItem('balance',balance);\n    history.push(\"/\")\n\n  };\n\n  return (\n    <Box\n      display=\"flex\"\n      flexDirection=\"column\"\n      justifyContent=\"space-between\"\n      minHeight=\"100vh\"\n    >\n      <Header hasHiddenAuthButtons={true} />\n      <Box className=\"content\">\n        <Stack spacing={2} className=\"form\">\n          <h2 className={\"title\"}>Login</h2>\n          <TextField \n          id=\"username\"\n           label=\"username\" \n           name=\"username\"\n           value={username}\n           onChange={(e)=>updateUsername(e.target.value)}\n           type=\"text\"\n           variant=\"outlined\" \n           fullWidth\n           />\n           <TextField \n          id=\"password\"\n           label=\"password\" \n           type=\"password\"\n           name=\"password\"\n           value={password}\n           onChange={(e)=>udpatePassword(e.target.value)}\n           variant=\"outlined\"\n           fullWidth\n           />\n           <Button  \n           className=\"button\" \n           variant=\"contained\"\n           onClick={evenHandler}\n           >LOGIN TO QKART</Button>\n           <p className=\"secondary-action\">\n           Don’t have an account?{\" \"}\n            <Link to=\"/register\" className={\"link\"}>Register now</Link>\n          </p>\n           \n        </Stack>\n      </Box>\n      <Footer />\n    </Box>\n  );\n};\n\nexport default Login;\n","import { CreditCard, Delete } from \"@mui/icons-material\";\nimport {\n  Button,\n  Divider,\n  Grid,\n  Stack,\n  TextField,\n  Typography,\n} from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport axios from \"axios\";\nimport { useSnackbar } from \"notistack\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { config } from \"../App\";\nimport Cart, { getTotalCartValue, generateCartItemsFrom ,getTotalItems} from \"./Cart\";\nimport \"./Checkout.css\";\nimport Footer from \"./Footer\";\nimport Header from \"./Header\";\n\n// Definition of Data Structures used\n/**\n * @typedef {Object} Product - Data on product available to buy\n *\n * @property {string} name - The name or title of the product\n * @property {string} category - The category that the product belongs to\n * @property {number} cost - The price to buy the product\n * @property {number} rating - The aggregate rating of the product (integer out of five)\n * @property {string} image - Contains URL for the product image\n * @property {string} _id - Unique ID for the product\n */\n\n/**\n * @typedef {Object} CartItem -  - Data on product added to cart\n *\n * @property {string} name - The name or title of the product in cart\n * @property {string} qty - The quantity of product added to cart\n * @property {string} category - The category that the product belongs to\n * @property {number} cost - The price to buy the product\n * @property {number} rating - The aggregate rating of the product (integer out of five)\n * @property {string} image - Contains URL for the product image\n * @property {string} productId - Unique ID for the product\n */\n\n/**\n * @typedef {Object} Address - Data on added address\n *\n * @property {string} _id - Unique ID for the address\n * @property {string} address - Full address string\n */\n\n/**\n * @typedef {Object} Addresses - Data on all added addresses\n *\n * @property {Array.<Address>} all - Data on all added addresses\n * @property {string} selected - Id of the currently selected address\n */\n\n/**\n * @typedef {Object} NewAddress - Data on the new address being typed\n *\n * @property { Boolean } isAddingNewAddress - If a new address is being added\n * @property { String} value - Latest value of the address being typed\n */\n\n// TODO: CRIO_TASK_MODULE_CHECKOUT - Should allow to type a new address in the text field and add the new address or cancel adding new address\n/**\n * Returns the complete data on all products in cartData by searching in productsData\n *\n * @param { String } token\n *    Login token\n *\n * @param { NewAddress } newAddress\n *    Data on new address being added\n *\n * @param { Function } handleNewAddress\n *    Handler function to set the new address field to the latest typed value\n *\n * @param { Function } addAddress\n *    Handler function to make an API call to add the new address\n *\n * @returns { JSX.Element }\n *    JSX for the Add new address view\n *\n */\nconst AddNewAddressView = ({token,newAddress,handleNewAddress,addAddress,}) => {\n  // console.log(\"param newAddress\",newAddress);\n  return (\n    <Box display=\"flex\" flexDirection=\"column\">\n      <TextField\n        multiline\n        minRows={4}\n        onChange={(e)=>{handleNewAddress({value:e.target.value})}}\n        placeholder=\"Enter your complete address\"\n      />\n      <Stack direction=\"row\" my=\"1rem\">\n        <Button\n          variant=\"contained\"\n          onClick={(e)=>{addAddress(token,newAddress.value); handleNewAddress({isAddingNewAddress:false,value:\"\"})} }\n        >\n          Add\n        </Button>\n        <Button\n          variant=\"text\"\n          onClick={(e)=>{handleNewAddress((curr)=>({...curr,isAddingNewAddress:false,value:\"\"}))}}\n        >\n          Cancel\n        </Button>\n      </Stack>\n    </Box>\n  );\n};\n\nconst Checkout = () => {\n  const token = localStorage.getItem(\"token\");\n  let classname=\"address-item \";\n  const history = useHistory();\n  const { enqueueSnackbar } = useSnackbar();\n  const [items, setItems] = useState([]);\n  const [products, setProducts] = useState([]);\n  const [addresses, setAddresses] = useState({ all: [], selected: \"\" });\n  const [newAddress, setNewAddress] = useState({\n    isAddingNewAddress: false,\n    value: \"\",\n  });\n\n  // Fetch the entire products list\n  const getProducts = async () => {\n    try {\n      const response = await axios.get(`${config.endpoint}/products`);\n\n      setProducts(response.data);\n      return response.data;\n    } catch (e) {\n      if (e.response && e.response.status === 500) {\n        enqueueSnackbar(e.response.data.message, { variant: \"error\" });\n        return null;\n      } else {\n        enqueueSnackbar(\n          \"Could not fetch products. Check that the backend is running, reachable and returns valid JSON.\",\n          {\n            variant: \"error\",\n          }\n        );\n      }\n    }\n  };\n\n  // Fetch cart data\n  const fetchCart = async (token) => {\n    if (!token) return;\n    try {\n      const response = await axios.get(`${config.endpoint}/cart`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n\n      return response.data;\n    } catch {\n      enqueueSnackbar(\n        \"Could not fetch cart details. Check that the backend is running, reachable and returns valid JSON.\",\n        {\n          variant: \"error\",\n        }\n      );\n      return null;\n    }\n  };\n\n  /**\n   * Fetch list of addresses for a user\n   *\n   * API Endpoint - \"GET /user/addresses\"\n   *\n   * Example for successful response from backend:\n   * HTTP 200\n   * [\n   *      {\n   *          \"_id\": \"\",\n   *          \"address\": \"Test address\\n12th street, Mumbai\"\n   *      },\n   *      {\n   *          \"_id\": \"BW0jAAeDJmlZCF8i\",\n   *          \"address\": \"New address \\nKolam lane, Chennai\"\n   *      }\n   * ]\n   *\n   * Example for failed response from backend:\n   * HTTP 401\n   * {\n   *      \"success\": false,\n   *      \"message\": \"Protected route, Oauth2 Bearer token not found\"\n   * }\n   */\n  const getAddresses = async (token) => {\n    if (!token) return;\n\n    try {\n      const response = await axios.get(`${config.endpoint}/user/addresses`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n\n      setAddresses({ ...addresses, all: response.data });\n      return response.data;\n    } catch {\n      enqueueSnackbar(\n        \"Could not fetch addresses. Check that the backend is running, reachable and returns valid JSON.\",\n        {\n          variant: \"error\",\n        }\n      );\n      return null;\n    }\n  };\n\n  /**\n   * Handler function to add a new address and display the latest list of addresses\n   *\n   * @param { String } token\n   *    Login token\n   *\n   * @param { NewAddress } newAddress\n   *    Data on new address being added\n   *\n   * @returns { Array.<Address> }\n   *    Latest list of addresses\n   *\n   * API Endpoint - \"POST /user/addresses\"\n   *\n   * Example for successful response from backend:\n   * HTTP 200\n   * [\n   *      {\n   *          \"_id\": \"\",\n   *          \"address\": \"Test address\\n12th street, Mumbai\"\n   *      },\n   *      {\n   *          \"_id\": \"BW0jAAeDJmlZCF8i\",\n   *          \"address\": \"New address \\nKolam lane, Chennai\"\n   *      }\n   * ]\n   *\n   * Example for failed response from backend:\n   * HTTP 401\n   * {\n   *      \"success\": false,\n   *      \"message\": \"Protected route, Oauth2 Bearer token not found\"\n   * }\n   */\n  const addAddress = async (token, newAddress) => {\n    try {\n      // TODO: CRIO_TASK_MODULE_CHECKOUT - Add new address to the backend and display the latest list of addresses\n      let url=config.endpoint+'/user/addresses';\n      let res=await axios.post(url,{\"address\":newAddress},{headers:{Authorization:`Bearer ${token}`}});\n      setAddresses({all: res.data ,isAddingNewAddress:false});\n      return res.data;\n\n    } catch (e) {\n      if (e.response) {\n        enqueueSnackbar(e.response.data.message, { variant: \"error\" });\n      } else {\n        enqueueSnackbar(\n          \"Could not add this address. Check that the backend is running, reachable and returns valid JSON.\",\n          {\n            variant: \"error\",\n          }\n        );\n      }\n    }\n  };\n\n  /**\n   * Handler function to delete an address from the backend and display the latest list of addresses\n   *\n   * @param { String } token\n   *    Login token\n   *\n   * @param { String } addressId\n   *    Id value of the address to be deleted\n   *\n   * @returns { Array.<Address> }\n   *    Latest list of addresses\n   *\n   * API Endpoint - \"DELETE /user/addresses/:addressId\"\n   *\n   * Example for successful response from backend:\n   * HTTP 200\n   * [\n   *      {\n   *          \"_id\": \"\",\n   *          \"address\": \"Test address\\n12th street, Mumbai\"\n   *      },\n   *      {\n   *          \"_id\": \"BW0jAAeDJmlZCF8i\",\n   *          \"address\": \"New address \\nKolam lane, Chennai\"\n   *      }\n   * ]\n   *\n   * Example for failed response from backend:\n   * HTTP 401\n   * {\n   *      \"success\": false,\n   *      \"message\": \"Protected route, Oauth2 Bearer token not found\"\n   * }\n   */\n  const deleteAddress = async (token, addressId) => {\n    try {\n      // TODO: CRIO_TASK_MODULE_CHECKOUT - Delete selected address from the backend and display the latest list of addresses\n      let url=config.endpoint+'/user/addresses/'+addressId;\n      let res=await axios.delete(url,{headers:{Authorization:`Bearer ${token}`}});\n      setAddresses({ ...addresses, all: res.data });\n      return res.data;\n\n    } catch (e) {\n      if (e.response) {\n        enqueueSnackbar(e.response.data.message, { variant: \"error\" });\n      } else {\n        enqueueSnackbar(\n          \"Could not delete this address. Check that the backend is running, reachable and returns valid JSON.\",\n          {\n            variant: \"error\",\n          }\n        );\n      }\n    }\n  };\n\n  // TODO: CRIO_TASK_MODULE_CHECKOUT - Validate request for checkout\n  /**\n   * Return if the request validation passed. If it fails, display appropriate warning message.\n   *\n   * Validation checks - show warning message with given text if any of these validation fails\n   *\n   *  1. Not enough balance available to checkout cart items\n   *    \"You do not have enough balance in your wallet for this purchase\"\n   *\n   *  2. No addresses added for user\n   *    \"Please add a new address before proceeding.\"\n   *\n   *  3. No address selected for checkout\n   *    \"Please select one shipping address to proceed.\"\n   *\n   * @param { Array.<CartItem> } items\n   *    Array of objects with complete data on products added to the cart\n   *\n   * @param { Addresses } addresses\n   *    Contains data on array of addresses and selected address id\n   *\n   * @returns { Boolean }\n   *    Whether validation passed or not\n   *\n   */\n  const validateRequest = (items, addresses) => {\n\n    if(getTotalCartValue(items)>localStorage.getItem(\"balance\")){\n      enqueueSnackbar(`You do not have enough balance in your wallet for this purchase`,{variant:\"warning\"})\n      return false;\n    }else if(addresses.all.length===0){\n      enqueueSnackbar(`Please add a new address before proceeding.`,{variant:\"warning\"})\n      return false;\n    }else if(!addresses.selected){\n      enqueueSnackbar(`Please select one shipping address to proceed.`,{variant:\"warning\"})\n      return false;\n    }\n    return true;\n\n  };\n\n  // TODO: CRIO_TASK_MODULE_CHECKOUT\n  /**\n   * Handler function to perform checkout operation for items added to the cart for the selected address\n   *\n   * @param { String } token\n   *    Login token\n   *\n   * @param { Array.<CartItem } items\n   *    Array of objects with complete data on products added to the cart\n   *\n   * @param { Addresses } addresses\n   *    Contains data on array of addresses and selected address id\n   *\n   * @returns { Boolean }\n   *    If checkout operation was successful\n   *\n   * API endpoint - \"POST /cart/checkout\"\n   *\n   * Example for successful response from backend:\n   * HTTP 200\n   * {\n   *  \"success\": true\n   * }\n   *\n   * Example for failed response from backend:\n   * HTTP 400\n   * {\n   *  \"success\": false,\n   *  \"message\": \"Wallet balance not sufficient to place order\"\n   * }\n   *\n   */\n  const performCheckout = async (token, items, addresses) => {\n    let isValid=validateRequest(items,addresses);\n    if(isValid){\n      try {\n        // TODO: CRIO_TASK_MODULE_CHECKOUT - Add new address to the backend and display the latest list of addresses\n        // \n        let url=config.endpoint+'/cart/checkout';\n        let res=await axios.post(url, {\"addressId\":addresses.selected},{headers:{Authorization:`Bearer ${token}`}});\n        // return res.data;\n\n        if(res.data){\n          let wallet=localStorage.getItem('balance');\n          let remain=wallet-getTotalCartValue(items);\n          localStorage.setItem(\"balance\",remain);\n          history.push(\"/thanks\")\n        }\n\n      } catch (e) {\n        if (e.response) {\n          enqueueSnackbar(e.response.data.message, { variant: \"error\" });\n        } else {\n          enqueueSnackbar(\n            \"Could not add this address. Check that the backend is running, reachable and returns valid JSON.\",\n            {\n              variant: \"error\",\n            }\n          );\n        }\n      }\n    }\n  };\n\n  // TODO: CRIO_TASK_MODULE_CHECKOUT - Fetch addressses if logged in, otherwise show info message and redirect to Products page\n\n\n  // Fetch products and cart data on page load\n  useEffect(() => {\n    const onLoadHandler = async () => {\n      const productsData = await getProducts();\n      const cartData = await fetchCart(token);\n      if (productsData && cartData) {\n        const cartDetails = await generateCartItemsFrom(cartData, productsData);\n        setItems(cartDetails);\n      }\n    //  await getAddresses(localStorage.getItem('token'));\n    };\n    onLoadHandler();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    if (token) {\n      getAddresses(token);\n    } else {\n      enqueueSnackbar(\"You must be logged in to access checkout page\", {\n        variant: \"info\",\n      });\n      history.push(\"/\");\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [token]);\n\n\n  return (\n    <>\n      <Header />\n      <Grid container>\n        <Grid item xs={12} md={9}>\n          <Box className=\"shipping-container\" minHeight=\"100vh\">\n            <Typography color=\"#3C3C3C\" variant=\"h4\" my=\"1rem\">\n              Shipping\n            </Typography>\n            <Typography color=\"#3C3C3C\" my=\"1rem\">\n              Manage all the shipping addresses you want. This way you won't\n              have to enter the shipping address manually with every order.\n              Select the address you want to get your order delivered.\n            </Typography>\n            <Divider />\n            <Box>\n              {/* TODO: CRIO_TASK_MODULE_CHECKOUT - Display list of addresses and corresponding \"Delete\" buttons, if present, of which 1 can be selected */}\n                \n\n              {\n                addresses.all.length!==0?\n                      (addresses.all.map((add)=>\n                          // console.log(add[\"address\"])\n                          {if(addresses.selected === add[\"_id\"])\n                            classname = \"address-item selected\"\n                          else\n                            classname = \"address-item not-selected\"\n                         return ( <div className={classname} onClick={(e)=>{setAddresses({...addresses,selected:add[\"_id\"]})}}  key={add[\"_id\"]}>\n                            <p my=\"1rem\" >{add[\"address\"]}</p>\n                            <Button \n                              startIcon={<Delete />} \n                              id={add[\"_id\"]}\n                              onClick={(e)=>{deleteAddress(token,e.target.id)}}\n                              >\n                                Delete\n                            </Button>\n                          </div>)\n                          }\n                      ))\n                  :\n                  (<Typography my=\"1rem\">\n                    No addresses found for this account. Please add one to proceed\n                  </Typography>)\n              }\n            </Box>\n\n            {/* TODO: CRIO_TASK_MODULE_CHECKOUT - Dislay either \"Add new address\" button or the <AddNewAddressView> component to edit the currently selected address */}\n            \n            {\n              newAddress.isAddingNewAddress===false?\n                (\n                    <Button\n                      color=\"primary\"\n                      variant=\"contained\"\n                      id=\"add-new-btn\"\n                      size=\"large\"\n                      onClick={() => {\n                        setNewAddress((currNewAddress) => ({\n                          ...currNewAddress,\n                          isAddingNewAddress: true,\n                        }));\n                      }}\n                     >\n                     Add new address\n                    </Button>\n                )\n                :\n                (\n                  <AddNewAddressView token={token} newAddress={newAddress} handleNewAddress={setNewAddress} addAddress={addAddress} />\n                )\n            }\n            \n            <Typography color=\"#3C3C3C\" variant=\"h4\" my=\"1rem\">\n              Payment\n            </Typography>\n            <Typography color=\"#3C3C3C\" my=\"1rem\">\n              Payment Method\n            </Typography>\n            <Divider />\n\n            <Box my=\"1rem\">\n              <Typography>Wallet</Typography>\n              <Typography>\n                Pay ${getTotalCartValue(items)} of available $\n                {localStorage.getItem(\"balance\")}\n              </Typography>\n            </Box>\n\n            <Button\n              startIcon={<CreditCard />}\n              variant=\"contained\"\n              onClick={(e)=>{performCheckout(token,items,addresses)}}\n            >\n              PLACE ORDER\n            </Button>\n          </Box>\n        </Grid>\n        <Grid item xs={12} md={3} bgcolor=\"#E9F5E1\">\n          <Cart isReadOnly products={products} items={items} />\n          <Box className=\"cart\" p={1}>\n            <h2>Order Details</h2>\n            <table  >\n            <tr>\n              <td>Products</td>\n              <td>{getTotalItems(items)}</td>\n            </tr>\n            <tr>\n              <td>SubTotal</td>\n              <td>${getTotalCartValue(items)}</td>\n            </tr>\n            <tr>\n              <td>Shipping Charges</td>\n              <td>$0</td>\n            </tr>\n            <tr>\n              <td><h3>Total</h3></td>\n              <td><h3>${getTotalCartValue(items)}</h3></td>\n            </tr>\n          </table>\n          </Box>\n        </Grid>\n      </Grid>\n      <Footer />\n    </>     \n    \n  );\n};\n\nexport default Checkout;\n","import { Button } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport React, { useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Footer from \"./Footer\";\nimport Header from \"./Header\";\nimport \"./Thanks.css\";\n\nconst Thanks = () => {\n  const history = useHistory();\n\n  const routeToProducts = () => {\n    history.push(\"/\");\n  };\n\n  useEffect(() => {\n    const token = localStorage.getItem(\"token\");\n\n    if (!token) {\n      history.push(\"/\");\n    }\n  }, [history]);\n\n  return (\n    <>\n      <Header />\n      <Box className=\"greeting-container\">\n        <h2>Yay! It's ordered 😃</h2>\n        <p>You will receive an invoice for your order shortly.</p>\n        <p>Your order will arrive in 7 business days.</p>\n        <p id=\"balance-overline\">Wallet Balance</p>\n        <p id=\"balance\">${localStorage.getItem(\"balance\")} Available</p>\n        <Button\n          variant=\"contained\"\n          size=\"large\"\n          id=\"continue-btn\"\n          onClick={routeToProducts}\n        >\n          Continue Shopping\n        </Button>\n      </Box>\n      <Footer />\n    </>\n  );\n};\n\nexport default Thanks;\n","import Register from \"./components/Register\";\nimport Product from \"./components/Products\";\nimport Login from \"./components/Login\";\nimport Checkout from \"./components/Checkout\";\nimport Thanks from './components/Thanks'\nimport ipConfig from \"./ipConfig.json\";\nimport {Switch,Route,Link} from \"react-router-dom\";\n\nexport const config = {\n  endpoint: `https://qkartbackend-lojd.onrender.com/api/v1`,\n};\n\nfunction App() {\n  return (\n    <div className=\"App\">\n  \n        <Switch>\n            <Route  path=\"/register\">\n             <Register />\n            </Route>\n            <Route  path=\"/login\">\n              <Login />\n            </Route>   \n            <Route  path=\"/checkout\">\n             <Checkout /> \n            </Route>\n            <Route  path=\"/Thanks\">\n             <Thanks /> \n            </Route>\n            <Route  path=\"/\">\n             <Product /> \n            </Route>\n        </Switch>\n  \n    </div>\n  );\n}\n\nexport default App;\n","import { createTheme } from \"@mui/material/styles\";\n\nconst theme = createTheme({\n  typography: {\n    fontFamily: \"Lato\"\n  },\n  palette: {\n    primary: {\n      light: \"#45c09f\",\n      main: \"#00a278\",\n      dark: \"#00845c\",\n      contrastText: \"#fff\",\n    },\n  },\n});\n\nexport default theme;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { SnackbarProvider } from \"notistack\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { ThemeProvider } from \"@mui/system\";\nimport theme from \"./theme\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <BrowserRouter>\n        <SnackbarProvider\n          maxSnack={1}\n          anchorOrigin={{\n            vertical: \"bottom\",\n            horizontal: \"center\",\n          }}\n          preventDuplicate\n        >\n          <App />\n        </SnackbarProvider>\n      </BrowserRouter>\n    </ThemeProvider>\n  </React.StrictMode>,\n   document.getElementById('root')\n);\n"],"sourceRoot":""}